{"version":3,"file":"static/js/195.d8a453bc.chunk.js","mappings":"kLAIM,SAAUA,EAAOC,GACnBA,EAAWC,KAAKD,GAEhB,IADA,IAAME,EAAO,GACJC,EAAI,EAAGA,EAAIH,EAASI,OAAQD,IACjCD,EAAKG,KAAKL,EAASM,WAAWH,IAElC,OAAOI,EAAAA,EAAAA,IAASL,EACpB,CAEM,SAAUM,EAAON,GACnBA,GAAOK,EAAAA,EAAAA,IAASL,GAEhB,IADA,IAAIF,EAAW,GACNG,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IAC7BH,GAAYS,OAAOC,aAAaR,EAAKC,IAEzC,OAAOQ,KAAKX,EAChB,C,2DChBMY,EAAS,I,QAAIC,ICJI,kBDuBvB,SAASC,EAAmBC,GACxB,IAAMC,EAAO,SAASC,EAAgBC,GACnB,MAAXA,IAAmBA,EAAU,CAAC,GAClC,IAAMC,EAA2B,GAEjC,GAAIF,EAAUG,gBAAqC,MAAnBF,EAAQG,OACpC,IACIF,EAAad,KAAK,IAAIY,EAAUG,eAAeL,EAASG,EAAQG,QACpD,CAAd,MAAMC,GAAQ,CAGpB,GAAIL,EAAUM,mBAA2C,MAAtBL,EAAQM,UACvC,IACIL,EAAad,KAAK,IAAIY,EAAUM,kBAAkBR,EAASG,EAAQM,WACvD,CAAd,MAAMF,GAAQ,CAGpB,GAAIL,EAAUQ,iBAAuC,MAApBP,EAAQQ,QACrC,IACIP,EAAad,KAAK,IAAIY,EAAUQ,gBAAgBV,EAASG,EAAQQ,SACrD,CAAd,MAAMJ,GAAQ,CAGpB,GAAIL,EAAUU,gBAAqC,MAAnBT,EAAQU,OAAgB,CAMpD,IACI,IAAMC,EAAW,IAAIZ,EAAUU,eAAeZ,EAASG,EAAQU,QAC3DC,EAASd,UAAoD,IAHxD,CAAE,SAAU,UAAW,UAAW,WAGde,QAAQD,EAASd,QAAQgB,OAClDZ,EAAad,KAAKwB,EAEV,CAAd,MAAMP,GAAQ,C,CAGpB,GAAIL,EAAUe,oBAA6C,MAAvBd,EAAQe,WACxC,IACId,EAAad,KAAK,IAAIY,EAAUe,mBAAmBjB,GACvC,CAAd,MAAMO,GAAQ,CAGpB,GAAIL,EAAUiB,cAAiC,MAAjBhB,EAAQiB,KAClC,IACI,IACMN,EAAW,IAAIZ,EAAUiB,aAAanB,EAASG,EAAQiB,MACzDN,EAASd,UAAoD,IAFpD,CAAE,WAEce,QAAQD,EAASd,QAAQgB,OAClDZ,EAAad,KAAKwB,EAEV,CAAd,MAAMP,GAAQ,CAGpB,GAA4B,IAAxBH,EAAaf,OAAgB,OAAO,KAExC,GAAIa,EAAUmB,iBAAkB,CAC5B,IAAIC,EAAS,EAMb,OALsB,MAAlBnB,EAAQmB,OACRA,EAASnB,EAAQmB,OACE,cAAZtB,IACPsB,EAAS,GAEN,IAAIpB,EAAUmB,iBAAiBjB,EAAckB,E,CAGxD,OAAOlB,EAAa,EACxB,EAMA,OAJAH,EAAKsB,UAAY,SAASvB,GACtB,OAAOD,EAAmBC,EAC9B,EAEOC,CACX,CAEA,SAASuB,EAAmBC,EAAazB,GACrC,IAAMC,EAAO,SAASC,EAAgBC,GAClC,OAAID,EAAUwB,gBACH,IAAIxB,EAAUwB,gBAAgBD,EAAKzB,GAGvC,IACX,EAMA,OAJAC,EAAKsB,UAAY,SAASvB,GACtB,OAAOwB,EAAmBC,EAAKzB,EACnC,EAEOC,CACX,CAEA,IAAM0B,EAAqB,CACvBC,QAAS,EACTC,WAAY,6CACZb,KAAM,YACNc,iBAAkB/B,EAAmB,cAGnCgC,EAAmB,CACrBH,QAAS,EACTC,WAAY,6CACZb,KAAM,UACNc,iBAAkB/B,EAAmB,YAGnCiC,EAAyB,CAC3BJ,QAAS,GACTZ,KAAM,gBACNc,iBAAkBN,EAAmB,sCAAuC,kBAI1ES,EAAwC,CAC1CC,YAAa,CAAEN,QAAS,EAAGZ,KAAM,eAEjCW,UAAWA,EACXQ,QAASR,EAETS,OAAQ,CAAER,QAAS,EAAGZ,KAAM,UAE5Be,QAASA,EACTM,QAASN,EAETO,QAAS,CACLV,QAAS,EACTC,WAAY,6CACZb,KAAM,UACNc,iBAAkB/B,EAAmB,YAGzCwC,MAAO,CACHX,QAAS,GACTZ,KAAM,QACNc,iBAAkB/B,EAAmB,UAGzCyC,OAAQ,CACJZ,QAAS,EACTC,WAAY,6CACZb,KAAM,SACNc,iBAAkB/B,EAAmB,WAGzC0C,SAAU,CAAEb,QAAS,QAASZ,KAAM,YAEpC0B,QAAS,CACLd,QAAS,SACTZ,KAAM,UACNc,iBAAkB/B,EAAmB,YAKzC4C,QAAS,CACLf,QAAS,GACTZ,KAAM,UACNc,iBAAkBN,EAAmB,mCAAqC,YAG9EoB,cAAe,CAAEhB,QAAS,GAAIZ,KAAM,iBAEpCgB,cAAeA,EACfa,eAAgBb,EAEhBc,aAAc,CACVlB,QAAS,EACTZ,KAAM,eACNc,iBAAkBN,EAAmB,qCAAuC,iBAGhFuB,KAAM,CAAEnB,QAAS,IAAKZ,KAAM,QAE5BgC,MAAO,CACHpB,QAAS,IACTZ,KAAM,QACNc,iBAAkB/B,EAAmB,UAEzCkD,SAAU,CAAErB,QAAS,MAAOZ,KAAM,YAElCkC,SAAU,CACNtB,QAAS,GACTZ,KAAM,WACNc,iBAAkB/B,EAAmB,aAEzC,iBAAkB,CAAE6B,QAAS,GAAIZ,KAAM,kBACvC,kBAAmB,CAAEY,QAAS,IAAKZ,KAAM,mBAEzCmC,SAAU,CAAEvB,QAAS,MAAOZ,KAAM,YAClC,mBAAoB,CAAEY,QAAS,OAAQZ,KAAM,oBAC7C,kBAAmB,CAAEY,QAAS,OAAQZ,KAAM,mBAE5CoC,IAAK,CAAExB,QAAS,GAAIZ,KAAM,OAC1BqC,KAAM,CAAEzB,QAAS,GAAIZ,KAAM,SASzB,SAAUsC,EAAWtD,GAEvB,GAAe,MAAXA,EAAmB,OAAO,KAE9B,GAAwB,kBAAbA,EAAuB,CAC9B,IAAK,IAAMgB,KAAQiB,EAAU,CACzB,IAAMsB,EAAWtB,EAASjB,GAC1B,GAAIuC,EAAS3B,UAAY5B,EACrB,MAAO,CACHgB,KAAMuC,EAASvC,KACfY,QAAS2B,EAAS3B,QAClBC,WAAa0B,EAAS1B,YAAc,KACpCC,iBAAmByB,EAASzB,kBAAoB,K,CAK5D,MAAO,CACHF,QAAS5B,EACTgB,KAAM,U,CAId,GAAwB,kBAAbhB,EAAuB,CAC9B,IAAMuD,EAAWtB,EAASjC,GAC1B,OAAgB,MAAZuD,EAA2B,KACxB,CACHvC,KAAMuC,EAASvC,KACfY,QAAS2B,EAAS3B,QAClBC,WAAY0B,EAAS1B,WACrBC,iBAAmByB,EAASzB,kBAAoB,K,CAIxD,IAAMyB,EAAYtB,EAASjC,EAAQgB,MAGnC,IAAKuC,EAID,MAHgC,kBAArBvD,EAAQ4B,SACf/B,EAAO2D,mBAAmB,0BAA2B,UAAWxD,GAE7DA,EAIa,IAApBA,EAAQ4B,SAAiB5B,EAAQ4B,UAAY2B,EAAS3B,SACtD/B,EAAO2D,mBAAmB,2BAA4B,UAAWxD,GAKrE,IAhQqByD,EAgQjBC,EAAuC1D,EAAQ8B,kBAAoB,KAUvE,OATuB,MAAnB4B,GAA2BH,EAASzB,mBAEhC4B,GAnQaD,EAkQGF,EAASzB,mBAjQY,oBAArB2B,EAAMlC,UAkQJgC,EAASzB,iBAAiBP,UAAUvB,GAEpCuD,EAASzB,kBAK5B,CACHd,KAAMhB,EAAQgB,KACdY,QAAS2B,EAAS3B,QAClBC,WAAa7B,EAAQ6B,YAAc0B,EAAS1B,YAAc,KAC1DC,iBAAkB4B,EAE1B,C,uDEnSO,IAAMC,EAAU,iB,oTCiCvB,SAASC,EAAKC,EAAmBC,GAChB,MAATA,IAAiBA,EAAQ,GAC7B,IAAMC,EAAqB,GAErBC,EAAUD,EAAOC,QAavB,OAXiB,SAAXC,EAAqBC,EAAiBJ,GACxCE,EAAQG,KAAKD,GAAK,SAAUE,GACpBN,EAAQ,GAAKO,MAAMC,QAAQF,GAC3BH,EAASG,EAAKN,EAAQ,GAEvBC,EAAOzE,KAAK8E,EAEnB,GACJ,CAEAH,CAASJ,EAAOC,GACTC,CACX,CAmGM,SAAUQ,EAAwBC,GACvC,OALK,SAAuBC,GAC5B,IAAIC,EAAM,EACV,OAAO,kBAAMD,EAAEC,IAAM,CACtB,CAEQC,CAzFF,SAA4BH,GACjC,IAAIE,EAAM,EACV,SAASE,IAAQ,OAAQJ,EAAME,MAAU,EAAKF,EAAME,IAAQ,CAM5D,IAHA,IAAIG,EAAeD,IACfE,EAAQ,EACRC,EAAM,CAAC,EAAG,GACL3F,EAAI,EAAGA,EAAIyF,EAAczF,IACjC2F,EAAIzF,KAAKwF,GAASF,KAInB,IAAII,EAAOJ,IACPK,EAAcP,EAClBA,GAAOM,EAEP,IAAIE,EAAa,EACbC,EAAc,EAClB,SAASC,IAOR,OANkB,GAAdF,IAGHC,EAAeA,GAAe,EAAKX,EAAME,KACzCQ,EAAa,GAENC,KAAiBD,EAAc,CACxC,CAUA,IARA,IACMG,EAAOC,KAAAA,IAAAA,EADH,IAEJC,EAAOF,IAAS,EAChBG,EAAOD,GAAQ,EACfE,EAAOJ,EAAO,EAGhBK,EAAW,EACNtG,EAAI,EAAGA,EARN,GAQaA,IAAKsG,EAAYA,GAAY,EAAKN,IAKzD,IAHA,IAAIO,EAAU,GACVC,EAAM,EACNC,EAAQR,IACC,CAIZ,IAHA,IAAI5B,EAAQ6B,KAAKQ,QAASJ,EAAWE,EAAM,GAAKd,EAAS,GAAKe,GAC1DE,EAAQ,EACRC,EAAMnB,EACHmB,EAAMD,EAAQ,GAAG,CACvB,IAAIE,EAAOF,EAAQC,IAAS,EACxBvC,EAAQsB,EAAIkB,GACfD,EAAMC,EAENF,EAAQE,C,CAGV,GAAa,GAATF,EAAY,MAChBJ,EAAQrG,KAAKyG,GAGb,IAFA,IAAIG,EAAIN,EAAMN,KAAKQ,MAAMD,EAAQd,EAAIgB,GAAWjB,GAC5CqB,EAAIP,EAAMN,KAAKQ,MAAMD,EAAQd,EAAIgB,EAAM,GAAKjB,GAAS,EAC9B,KAAlBoB,EAAIC,GAAKZ,IACjBG,EAAYA,GAAY,EAAKD,EAAOL,IACpCc,EAAKA,GAAK,EAAKT,EACfU,EAAKA,GAAK,EAAKV,EAAO,EAEvB,KAAOS,GAAKC,EAAIX,GACfE,EAAYA,EAAWH,EAAUG,GAAY,EAAMD,IAAS,EAAML,IAClEc,EAAKA,GAAK,EAAKX,EACfY,GAAMA,EAAIZ,IAAS,EAAKA,EAAO,EAEhCK,EAAMM,EACNL,EAAQ,EAAIM,EAAID,C,CAEjB,IAAIE,EAASvB,EAAe,EAC5B,OAAOc,EAAQU,KAAI,SAAAC,GAClB,OAAQA,EAAIF,GACX,KAAK,EAAG,OAAOA,EAAS,OAAY5B,EAAMS,MAAkB,GAAOT,EAAMS,MAAkB,EAAKT,EAAMS,MACtG,KAAK,EAAG,OAAOmB,EAAS,KAAU5B,EAAMS,MAAkB,EAAKT,EAAMS,MACrE,KAAK,EAAG,OAAOmB,EAAS5B,EAAMS,KAC9B,QAAS,OAAOqB,EAAI,EAEtB,GACD,CASqBC,CAAkB/B,GACvC,CAGM,SAAUgC,EAAOpH,GACtB,OAAY,EAAJA,GAAWA,GAAK,EAAMA,GAAK,CACpC,CAQA,SAASqH,EAAeC,EAAWC,GAElC,IADA,IAAIlC,EAAIJ,MAAMqC,GACLtH,EAAI,EAAGkH,GAAK,EAAGlH,EAAIsH,EAAGtH,IAAKqF,EAAErF,GAAKkH,GAAK,EAAIK,IACpD,OAAOlC,CACR,CAEA,SAASmC,EAAYF,EAAWC,GAE/B,IADA,IAAIlC,EAAIJ,MAAMqC,GACLtH,EAAI,EAAGkH,EAAI,EAAGlH,EAAIsH,EAAGtH,IAAKqF,EAAErF,GAAKkH,GAAKE,EAAOG,KACtD,OAAOlC,CACR,CAEM,SAAUoC,EAAkBF,EAAgBG,GAK9C,IAJA,IAAIrC,EAAIgC,EAAeE,IAAQA,GAC3BD,EAAIC,IACJI,EAAKN,EAAeC,EAAGC,GACvBK,EAtBR,SAAqBN,EAAWC,GAE/B,IADA,IAAIlC,EAAIJ,MAAMqC,GACLtH,EAAI,EAAGA,EAAIsH,EAAGtH,IAAKqF,EAAErF,GAAK,EAAIuH,IACvC,OAAOlC,CACR,CAkBawC,CAAYP,EAAGC,GACfvH,EAAI,EAAGA,EAAIsH,EAAGtH,IACnB,IAAK,IAAI8H,EAAI,EAAGA,EAAIF,EAAG5H,GAAI8H,IACvBzC,EAAEnF,KAAKyH,EAAG3H,GAAK8H,GAGvB,OAAOJ,EAASrC,EAAE4B,KAAI,SAAAC,GAAC,OAAIQ,EAAOR,EAAE,IAAI7B,CAC5C,CA8BA,SAAS0C,EAAgBT,EAAWU,EAAWT,GAE3C,IADA,IAAIU,EAAIhD,MAAMqC,GAAGY,UAAKC,GAAWlB,KAAI,iBAAM,EAAE,IACpCjH,EAAI,EAAGA,EAAIgI,EAAGhI,IACnBwH,EAAYF,EAAGC,GAAM3C,SAAQ,SAACsC,EAAGY,GAAC,OAAKG,EAAEH,GAAG5H,KAAKgH,EAAE,IAEvD,OAAOe,CACX,CAGA,SAASG,EAAkBJ,EAAWT,GACrC,IAAIc,EAAK,EAAId,IACTe,EAAKf,IACLK,EAtBC,SAAqCL,GAE1C,IADA,IAAIlC,EAAI,KACK,CACZ,IAAIrF,EAAIuH,IACR,GAAS,GAALvH,EAAQ,MACZqF,EAAEnF,KAAKF,E,CAER,OAAOqF,CACR,CAcUkD,CAA2BhB,GAEpC,OAAO/C,EADCuD,EAAgBH,EAAG3H,OAAQ,EAAE+H,EAAGT,GAC1BN,KAAI,SAAC5B,EAAGrF,GACpB,IAAMkH,EAAI7B,EAAE,GAAImD,EAAKnD,EAAEoD,MAAM,GAG9B,OAAOxD,MAAM2C,EAAG5H,IAAIkI,UAAKC,GAAWlB,KAAI,SAACyB,EAAGZ,GAC3C,IAAIa,EAAOb,EAAIQ,EACf,MAAO,CAACpB,EAAIY,EAAIO,EAAIG,EAAGvB,KAAI,SAAA2B,GAAC,OAAIA,EAAID,CAAI,IACzC,GACD,IACD,CAEA,SAASE,EAAuBb,EAAWT,GAG1C,OADQQ,EADA,EAAIR,IACe,EAAES,EAAGT,GACvBN,KAAI,SAAA5B,GAAC,MAAI,CAACA,EAAE,GAAIA,EAAEoD,MAAM,GAAG,GACrC,CCvNA,IAAMK,ECEK3D,GAAwBvF,EAAAA,EAAAA,GAAO,q6cDIpCmJ,EAAQ,IAAIC,IAAIvB,EAAkBqB,IAClCG,EAAU,IAAID,IAAIvB,EAAkBqB,IACpCI,EDyJA,SAA0B3B,GAE/B,IADA,IAAI4B,EAAM,KACG,CACZ,IAAInB,EAAIT,IACR,GAAS,GAALS,EAAQ,MACZmB,EAAIjJ,KAAKkI,EAAkBJ,EAAGT,G,CAE/B,OAAa,CACZ,IAAIS,EAAIT,IAAS,EACjB,GAAIS,EAAI,EAAG,MACXmB,EAAIjJ,KAAK2I,EAAuBb,EAAGT,G,CAEpC,OAxJD,SAA6F9C,GAEzF,IADA,IAAME,EAAqC,CAAC,EACnC3E,EAAI,EAAGA,EAAIyE,EAAMxE,OAAQD,IAAK,CACnC,IAAMqE,EAAQI,EAAMzE,GACpB2E,EAAON,EAAM,IAAMA,EAAM,E,CAE7B,OAAOM,CACX,CAiJQyE,CAAmC5E,EAAK2E,GAChD,CCtKeE,CAAgBP,GACzBQ,ED6NA,SAA0B/B,GAC/B,IAAIgC,EAAS9B,EAAkBF,GAAMiC,MAAK,SAAC1C,EAAGC,GAAC,OAAKD,EAAIC,CAAC,IACzD,OACA,SAAS0C,IACR,IAAIC,EAAW,GACf,OAAa,CACZ,IAAIC,EAAOlC,EAAkBF,EAAMgC,GACnC,GAAmB,GAAfI,EAAK1J,OAAa,MACtByJ,EAASxJ,KAAK,CAAC0J,IAAK,IAAIZ,IAAIW,GAAOE,KAAMJ,K,CAExCC,EAASF,MAAK,SAAC1C,EAAGC,GAAC,OAAKA,EAAE6C,IAAIE,KAAOhD,EAAE8C,IAAIE,IAAI,IAChD,IAAIC,EAAOxC,IAOX,MAAO,CAACmC,SAAAA,EAAUM,MANND,EAAO,EAMME,QAJJ,GADrBF,EAAQA,EAAO,EAAG,IAKaG,KAFZ,IADnBH,IAAS,GAG4BI,MADjB,GAARJ,EAEd,CAjBON,EAkBR,CCjPmBW,CAAgBtB,GAOnC,SAASuB,EAAWzI,GAChB,OAAO0I,EAAAA,EAAAA,IAAiB1I,EAC5B,CAEA,SAAS2I,EAAYC,GACjB,OAAOA,EAAIC,QAAO,SAAAC,GAAE,OAAU,OAANA,CAAY,GACxC,CAEM,SAAUC,EAAyB/I,GAAY,IACnB,EADmB,UAClCA,EAAKgJ,MAAM,MAAI,IAAjC,IAAK,EAAL,qBAAmC,KAA1BC,EAAK,QACTL,EAAMH,EAAWQ,GACrB,IACC,IAAK,IAAI7K,EAAIwK,EAAIM,YAdD,IAc2B,EAAG9K,GAAK,EAAGA,IACrD,GAfe,KAeXwK,EAAIxK,GACP,MAAM,IAAI+K,MAAM,oCAGlB,GAAIP,EAAIvK,QAAU,GAAKuK,EAAIQ,OAAM,SAAAN,GAAE,OAAIA,EAAK,GAAI,KApBpC,KAoByCF,EAAI,IApB7C,KAoB8DA,EAAI,GAC7E,MAAM,IAAIO,MAAM,0B,CAEhB,MAAOE,GACR,MAAM,IAAIF,MAAM,kBAAD,OAAmBF,EAAK,cAAMI,EAAIC,S,EAElD,+BACD,OAAOtJ,CACR,CAEM,SAAUuJ,EAAcvJ,GAC7B,OAAO+I,EAGR,SAAmB/I,EAAcwJ,GAChC,IAAIC,EAAQhB,EAAWzI,GAAM0J,UACzBC,EAAS,GACb,KAAOF,EAAMpL,QAAQ,CACpB,IAAIuL,EAAQC,EAAuBJ,GACnC,GAAIG,EACHD,EAAOrL,KAAI,MAAXqL,GAAM,OAASH,EAAaI,SAD7B,CAIA,IAAId,EAAKW,EAAMK,MACf,GAAI3C,EAAM4C,IAAIjB,GACba,EAAOrL,KAAKwK,QAGb,IAAIzB,EAAQ0C,IAAIjB,GAAhB,CAGA,IAAIF,EAAMtB,EAAOwB,GACjB,IAAIF,EAIJ,MAAM,IAAIO,MAAM,2BAAD,OAA4BL,EAAGkB,SAAS,IAAIC,gBAH1DN,EAAOrL,KAAI,MAAXqL,GAAM,OAASf,G,GAKjB,OAAOG,GAGKmB,EAHwBxL,OAAOyL,cAAa,MAApBzL,OAAwBiL,GAIlDO,EAAEE,UAAU,SADvB,IAAaF,CAFb,CA5BiCE,CAAUpK,EAAM2I,GACjD,CAiCA,SAASkB,EAAuBjB,EAAoByB,G,MAE/CT,EACAU,EAFArC,EAAOP,EAGP6C,EAAQ,GACR7G,EAAMkF,EAAIvK,OACVgM,IAAOA,EAAMhM,OAAS,GAC1B,IAD6B,iBAE5B,IAAIyK,EAAKF,IAAMlF,GAEf,KADAuE,EAA6C,QAAtC,EAAAA,EAAKH,SAAS0C,MAAK,SAAAlF,GAAC,OAAIA,EAAE0C,IAAI+B,IAAIjB,EAAG,WAAC,eAAEb,MACpC,cACX,GAAIA,EAAKK,KACRgC,EAAQxB,OACF,GAAIb,EAAKM,OACXO,IAAOwB,EAAO,cAEnBC,EAAMjM,KAAKwK,GACPb,EAAKI,OACRkC,EAAMjM,KAAK,OACPoF,EAAM,GAAqB,OAAhBkF,EAAIlF,EAAM,IAAcA,KAEpCuE,EAAKG,QACRwB,EAAQW,EAAM1D,QACI,GAAdoB,EAAKG,OAAYwB,EAAMa,OAAO,EAAG,GACjCJ,GAAOA,EAAM/L,KAAI,MAAV+L,GAAK,OAASzB,EAAI/B,MAAMnD,GAAKgG,YACxCd,EAAIvK,OAASqF,EACb,EAnBKA,GAAK,kBAOQ,K,CAcpB,OAAOkG,CACR,CErIA,IAAM/K,EAAS,IAAIC,EAAAA,GAAO6D,EAAAA,GAIpB+H,EAAQ,IAAIC,WAAW,IAG7B,SAASC,EAAeC,GACpB,GAAoB,IAAhBA,EAAKxM,OAAgB,MAAM,IAAI8K,MAAM,qCACzC,OAAO0B,CACX,CAEA,SAASC,EAAa9K,GAClB,IAAMwD,GAAQuH,EAAAA,EAAAA,IAAYxB,EAAcvJ,IAClCgL,EAA2B,GAEjC,GAAoB,IAAhBhL,EAAK3B,OAAgB,OAAO2M,EAGhC,IADA,IAAIC,EAAO,EACF7M,EAAI,EAAGA,EAAIoF,EAAMnF,OAAQD,IAAK,CAIzB,KAHAoF,EAAMpF,KAIZ4M,EAAM1M,KAAKsM,EAAepH,EAAMqD,MAAMoE,EAAM7M,KAC5C6M,EAAO7M,EAAI,E,CAKnB,GAAI6M,GAAQzH,EAAMnF,OAAU,MAAM,IAAI8K,MAAM,qCAG5C,OADA6B,EAAM1M,KAAKsM,EAAepH,EAAMqD,MAAMoE,KAC/BD,CACX,CAaM,SAAUE,EAASlL,GAEA,kBAAVA,GACPnB,EAAO2D,mBAAmB,iCAAkC,OAAQxC,GAMxE,IAHA,IAAI+C,EAA8B2H,EAE5BM,EAAQF,EAAa9K,GACpBgL,EAAM3M,QACT0E,GAASoI,EAAAA,EAAAA,IAAUC,EAAAA,EAAAA,IAAO,CAACrI,GAAQoI,EAAAA,EAAAA,GAAUH,EAAMlB,UAGvD,OAAOuB,EAAAA,EAAAA,IAAQtI,EACnB,CAxDA2H,EAAMpE,KAAK,G,yDCCLzH,GAAS,IAAIC,EAAAA,GAAO6D,EAAAA,GAiBb2I,GAAS,WAGlB,6BACIC,KAAKC,QAAUD,KAAKE,mBACxB,CAucC,OAvcA,yCAED,WAAiB,WACPD,EAA6B,CAAC,EAE9BE,EAAUH,KAAKG,QAAQC,KAAKJ,MAC5BK,EAAYL,KAAKK,UAAUD,KAAKJ,MAChCM,EAAWN,KAAKM,SAASF,KAAKJ,MAC9BpN,EAAOoN,KAAKpN,KAAKwN,KAAKJ,MACtBO,EAAOP,KAAKO,KAAKH,KAAKJ,MACtBQ,EAAMR,KAAKQ,IAAIJ,KAAKJ,MACpBS,EAAST,KAAKS,OAAOL,KAAKJ,MAC1BU,EAAOV,KAAKU,KAAKN,KAAKJ,MAmI5B,OA/HAC,EAAQU,YAAc,CAClBJ,KAAMA,EAENG,KAAMA,EACNE,WAAYb,EAAUc,UAAUb,KAAKY,WAAWR,KAAKJ,MAAO,MAE5Dc,UAAWf,EAAUc,UAAUN,EAAM,MACrCQ,YAAahB,EAAUc,UAAUJ,EAAQ,MACzCO,iBAAkBjB,EAAUc,UAAUJ,EAAQ,MAE9CQ,cAAelB,EAAUc,UAAUJ,EAAQ,MAE3CS,KAAMf,EAINgB,SAAUpB,EAAUc,UAAUR,GAC9Be,qBAAsBrB,EAAUc,UAAUR,GAC1CgB,aAActB,EAAUc,UAAUR,GAElCiB,SAAUjB,EACVkB,GAAIxB,EAAUc,UAAUV,EAAS,MACjCjJ,MAAOmJ,EACPmB,MAAOf,EACP7N,KAAMA,EAEN+I,EAAGoE,EAAUc,UAAUb,KAAKyB,SAC5B9C,EAAGoB,EAAUc,UAAUb,KAAKyB,SAC5BvJ,EAAG6H,EAAUc,UAAUJ,GAEvBiB,QAAS3B,EAAUc,UAAUV,EAAS,MAEtCwB,IAAK5B,EAAUc,UAAUjO,IAG7BqN,EAAQ2B,mBAAqB,CACzBV,KAAMnB,EAAUc,UAAUV,GAC1BqB,MAAOzB,EAAUc,UAAUJ,GAC3Ba,SAAUvB,EAAUc,UAAUR,GAC9Bc,SAAUpB,EAAUc,UAAUR,GAC9Be,qBAAsBrB,EAAUc,UAAUR,GAC1CgB,aAActB,EAAUc,UAAUR,GAClCkB,GAAIxB,EAAUc,UAAUV,GACxBjJ,MAAO6I,EAAUc,UAAUR,GAC3BzN,KAAMmN,EAAUc,WA9CD,SAAC3I,GAAa,OAAO,EAAKtF,KAAKsF,GAAG,EAAO,IA+CxDwI,KAAMX,EAAUc,UAAUJ,GAC1BG,WAAYb,EAAUc,UAAUb,KAAKY,WAAWR,KAAKJ,MAAO,OAGhEC,EAAQ4B,WAAa,CACjBb,iBAAkBP,EAClBM,YAAaN,EACbqB,gBAAiBvB,EACjBJ,QAASA,EACT4B,OAAQhC,EAAUiC,QAAQzB,GAC1B3N,KAAMA,EACNqP,SAAUxB,EACVK,UAAWP,GAGfN,EAAQiC,QAAU,CACdX,GAAIxB,EAAUc,UAAUb,KAAKG,QAAS,MACtCe,KAAMnB,EAAUc,UAAUb,KAAKG,QAAS,MACxCgC,gBAAiBpC,EAAUc,UAAUV,EAAS,MAC9Ca,iBAAkBP,EAElB2B,KAAMrC,EAAUc,UAAUL,GAC1B6B,QAAShC,EACTiC,UAAWvC,EAAUc,UAAUjO,GAC/BkO,UAAWP,EACXuB,gBAAiBvB,EACjBgC,KAAMxC,EAAUiC,QAAQhC,KAAK6B,WAAWzB,KAAKJ,OAC7Ce,YAAaN,EACbQ,cAAelB,EAAUc,UAAUJ,EAAQ,MAC3C+B,kBAAmBnC,EACnBoC,kBAAmB1C,EAAUc,UAAUR,GACvCqC,OAAQ3C,EAAUc,UAAUJ,GAC5BC,KAAMA,GAGVT,EAAQ0C,MAAQ,CACZpC,KAAMR,EAAUc,UAAUN,GAC1BqC,WAAYrC,EACZE,OAAQA,EAERoC,UAAWpC,EACXe,MAAOzB,EAAUc,UAAUL,GAC3BsC,WAAY9C,KAAK8C,WAAW1C,KAAKJ,MAEjCsB,SAAUjB,EACVgC,QAAShC,EAET0C,MAAOhD,EAAUc,UAAUV,GAC3B6C,UAAWpQ,EAEXqQ,aAAclD,EAAUc,UAAUd,EAAUiC,QAAQzB,IAEpD2C,cAAenD,EAAUc,UAAUR,IAGvCJ,EAAQkD,uBAAwBC,EAAAA,EAAAA,IAAYnD,EAAQ0C,OACpD1C,EAAQkD,sBAAsBF,aAAelD,EAAUc,UAAUd,EAAUiC,QAAQhC,KAAKqD,oBAAoBjD,KAAKJ,QAEjHC,EAAQ3C,OAAS,CACbgG,UAAWvD,EAAUc,UAAUP,OAAUtF,GACzCuI,QAASxD,EAAUc,UAAUP,OAAUtF,GACvC8F,UAAWf,EAAUc,UAAUN,OAAMvF,GACrCmF,QAASJ,EAAUc,UAAUV,OAASnF,GACtC+G,OAAQhC,EAAUc,UAAUb,KAAK+B,OAAO3B,KAAKJ,WAAOhF,IAGxDiF,EAAQuD,UAAY,CAChBzC,YAAahB,EAAUc,UAAUJ,GACjCK,UAAWf,EAAUc,UAAUN,GAC/BS,iBAAkBP,EAElBgD,QAAS1D,EAAUc,UAAUb,KAAK0D,QAAQtD,KAAKJ,OAE/CG,QAASA,EACTvN,KAAMmN,EAAU4D,aAAa/Q,EAAM,MAEnCmP,OAAQhC,EAAUiC,QAAQzB,GAE1BuB,gBAAiBvB,EACjB0B,SAAUxB,GAGPR,CACX,GAAC,wBAED,SAAWW,GACP,OAAOgD,EAAAA,EAAAA,IAAchD,GAAc,GACvC,GAGA,oBACA,SAAOH,GACH,MAAe,OAAXA,EAA0B,EACvBoD,EAAAA,GAAAA,KAAepD,GAAQqD,UAClC,GAAC,kBAED,SAAKrD,GACD,MAAe,OAAXA,GAA6B,MAAVA,EAAyB,EACzCoD,EAAAA,GAAAA,KAAepD,GAAQqD,UAClC,GAEA,uBACA,SAAU5M,GACN,OAAO2M,EAAAA,GAAAA,KAAe3M,EAC1B,GAEA,qBACA,SAAQA,GACJ,GAAsB,mBAAXA,EAAwB,OAAOA,EAC1C,GAAsB,kBAAXA,EAAqB,CAE5B,GAAc,UADdA,EAAQA,EAAM6M,eACU,OAAO,EAC/B,GAAc,UAAV7M,EAAqB,OAAO,C,CAEpC,MAAM,IAAI0G,MAAM,qBAAuB1G,EAC3C,GAAC,iBAED,SAAIA,EAAY8M,GACZ,MAAsB,kBAAX9M,IACF8M,GAAoC,OAA1B9M,EAAM+M,UAAU,EAAG,KAAe/M,EAAQ,KAAOA,IAC5DgN,EAAAA,EAAAA,IAAYhN,IACNA,EAAM6M,cAGbzQ,GAAO2D,mBAAmB,eAAgB,QAASC,EAC9D,GAAC,kBAED,SAAKA,EAAY8M,GACb,IAAMxM,EAASwI,KAAKQ,IAAItJ,EAAO8M,GAC/B,GAAKxM,EAAO1E,OAAS,IAAO,EACxB,MAAM,IAAI8K,MAAM,8BAAgC1G,GAEpD,OAAOM,CACX,GAGA,qBACA,SAAQN,GACJ,OAAOiN,EAAAA,GAAAA,IAAWjN,EACtB,GAAC,yBAED,SAAYA,GACR,KAAKgN,EAAAA,EAAAA,IAAYhN,EAAO,IAAO,OAAO,KACtC,IAAMiJ,GAAUgE,EAAAA,GAAAA,KAAWC,EAAAA,EAAAA,IAAalN,EAAO,KAC/C,MC/OmB,+CD+OXiJ,EAA2B,KAAMA,CAC7C,GAAC,6BAED,SAAgBjJ,GACZ,OAAOmN,EAAAA,GAAAA,IAAmBnN,EAC9B,GAEA,sBACA,SAASoJ,GACL,GAAgB,MAAZA,EAAoB,MAAO,SAE/B,GAAiB,aAAbA,EAA2B,MAAO,MAEtC,OAAQA,GACJ,IAAK,WAAY,MAAO,MACxB,IAAK,SAAU,IAAK,UAAW,IAAK,OAAQ,IAAK,YAC7C,OAAOA,EAGf,GAAyB,kBAAdA,IAA0B4D,EAAAA,EAAAA,IAAY5D,GAC7C,OAAOgE,EAAAA,EAAAA,IAA0BhE,GAGrC,MAAM,IAAI1C,MAAM,mBACpB,GAEA,kBACA,SAAK1G,EAAY8M,GACb,IAAMxM,EAASwI,KAAKQ,IAAItJ,EAAO8M,GAC/B,OAA8B,MAA1BO,EAAAA,EAAAA,IAAc/M,GACPlE,GAAO2D,mBAAmB,eAAgB,QAASC,GAEvDM,CACX,GAEA,wBACA,SAAWN,GACP,GAAa,MAATA,EAAiB,OAAO,KAE5B,IAAMgB,EAAI2L,EAAAA,GAAAA,KAAe3M,GAEzB,IACI,OAAOgB,EAAE4L,UACI,CAAf,MAAO9P,GAAQ,CAElB,OAAO,IACV,GAAC,qBAED,SAAQkD,GACJ,KAAKgN,EAAAA,EAAAA,IAAYhN,GACb,MAAM,IAAI0G,MAAM,mBAEpB,OAAO4G,EAAAA,EAAAA,IAAWtN,EAAO,GAC7B,GAAC,oBAED,SAAOA,EAAYuN,GACK,MAAhBvN,EAAMwN,QAAiC,MAAfxN,EAAM6L,QAC9B7L,EAAM6L,MAAQ7L,EAAMwN,QAGxB,IAAM5B,EAAmC,MAArB5L,EAAMyN,YAAuBzN,EAAMyN,YAAazN,EAAM4L,WACpEtL,EAASuI,EAAU/C,MAAMyH,EAAQvN,GAEvC,OADAM,EAAOmN,YAA8B,MAAd7B,EAAsB,KAAMe,EAAAA,GAAAA,KAAef,GAC3DtL,CACX,GAAC,mBAED,SAAMN,GACF,OAAO8I,KAAK4E,OAAO1N,EAAO8I,KAAKC,QAAQ0C,MAC3C,GAAC,mCAED,SAAsBzL,GAClB,OAAO8I,KAAK4E,OAAO1N,EAAO8I,KAAKC,QAAQkD,sBAC3C,GAEA,gCACA,SAAmBjM,GACf,OAAO6I,EAAU/C,MAAMgD,KAAKC,QAAQ2B,mBAAoB1K,EAC5D,GAAC,iCAED,SAAoByJ,GAGO,MAAnBA,EAAYkE,KAAuC,MAAxBlE,EAAYW,WACvCX,EAAYW,SAAWX,EAAYkE,KAKnClE,EAAYY,IAAMsC,EAAAA,GAAAA,KAAelD,EAAYY,IAAIuD,WACjDnE,EAAYY,GAAK,8CAII,MAArBZ,EAAYzC,OAAqC,MAApByC,EAAY/N,OACzC+N,EAAY/N,KAAO+N,EAAYzC,OAIb,MAAlByC,EAAYY,IAAqC,MAAvBZ,EAAYe,UACtCf,EAAYe,QAAU1B,KAAKmC,gBAAgBxB,IAGrB,IAArBA,EAAYD,MAAmC,IAArBC,EAAYD,MAAwC,MAA1BC,EAAYC,aACjED,EAAYC,WAAa,IAG7B,IAAMpJ,EAA8BuI,EAAU/C,MAAMgD,KAAKC,QAAQU,YAAaA,GAE9E,GAA2B,MAAvBA,EAAYtL,QAAiB,CAC7B,IAAIA,EAAUsL,EAAYtL,SAEtB6O,EAAAA,EAAAA,IAAY7O,KACZA,EAAUwO,EAAAA,GAAAA,KAAexO,GAASyO,YAGtCtM,EAAOnC,QAAUA,C,KAEd,CACH,IAAIA,EAAUsL,EAAYoE,UAGX,MAAX1P,GAA+B,MAAZmC,EAAOU,IAC1B7C,EAAUsL,EAAYtL,UAGtB6O,EAAAA,EAAAA,IAAY7O,KACZA,EAAUwO,EAAAA,GAAAA,KAAexO,GAASyO,YAGd,kBAAbzO,GAAqC,MAAZmC,EAAOU,KACvC7C,GAAWmC,EAAOU,EAAI,IAAM,GACd,IAAK7C,EAAU,GAC7BA,EAAU2P,SAAS3P,IAGC,kBAAbA,IAAyBA,EAAU,GAE9CmC,EAAOnC,QAAUA,C,CAQrB,OAJImC,EAAOsJ,WAAoD,MAAvCtJ,EAAOsJ,UAAUmE,QAAQ,KAAM,MACnDzN,EAAOsJ,UAAY,MAGhBtJ,CACX,GAAC,yBAED,SAAYN,GACR,OAAOgO,EAAAA,EAAAA,IAAiBhO,EAC5B,GAAC,wBAED,SAAWA,GACP,OAAO6I,EAAU/C,MAAMgD,KAAKC,QAAQ4B,WAAY3K,EACpD,GAAC,qBAED,SAAQA,GACJ,IAAMM,EAA6BuI,EAAU/C,MAAMgD,KAAKC,QAAQiC,QAAShL,GAGzE,GAAmB,MAAfM,EAAO4K,KACP,GAAI5K,EAAO4K,KAAKtP,QAAU,EAAG,CAEzB,IAAMoE,EAAQ2M,EAAAA,GAAAA,KAAerM,EAAO4K,MAAM0B,WAC5B,IAAV5M,GAAyB,IAAVA,GAEM,MAAjBM,EAAOkL,QAAmBlL,EAAOkL,SAAWxL,GAC5C5D,GAAO2D,mBAAmB,kCAAmC,QAAS,CAAEmL,KAAM5K,EAAO4K,KAAMM,OAAQlL,EAAOkL,SAE9GlL,EAAOkL,OAASxL,SACTM,EAAO4K,MAEd9O,GAAO2D,mBAAmB,0BAA2B,aAAcO,EAAO4K,K,MAEhD,KAAvB5K,EAAO4K,KAAKtP,QAEnBQ,GAAO2D,mBAAmB,oBAAqB,aAAcO,EAAO4K,MAQ5E,OAJqB,MAAjB5K,EAAOkL,SACPlL,EAAO2N,WAAY,GAGhB3N,CACX,GAAC,oBAED,SAAON,GAAU,WACb,OAAIY,MAAMC,QAAQb,GACPA,EAAM4C,KAAI,SAAC5B,GAAC,OAAK,EAAK6J,OAAO7J,EAAE,IAEtB,MAAThB,EACA8I,KAAKO,KAAKrJ,GAAO,GAGrB,IACX,GAAC,oBAED,SAAOA,GACH,OAAO6I,EAAU/C,MAAMgD,KAAKC,QAAQ3C,OAAQpG,EAChD,GAAC,uBAED,SAAUA,GACN,OAAO6I,EAAU/C,MAAMgD,KAAKC,QAAQuD,UAAWtM,EACnD,IAAC,oBAED,SAAauN,EAA0CW,GACnD,IAAM5N,EAAc,CAAC,EACrB,IAAK,IAAM6N,KAAOZ,EACd,IACI,IAAMvN,EAAQuN,EAAOY,GAAKD,EAAOC,SACnBrK,IAAV9D,IAAuBM,EAAO6N,GAAOnO,E,CAC3C,MAAOlD,GAGL,MAFAA,EAAMsR,SAAWD,EACjBrR,EAAMuR,WAAaH,EAAOC,GACpBrR,C,CAGd,OAAOwD,CACX,GAEA,uBACA,SAAiBiN,EAAoBe,GACjC,OAAQ,SAAStO,GACb,OAAa,MAATA,EAAwBsO,EACrBf,EAAOvN,EAClB,CACJ,GAEA,0BACA,SAAoBuN,EAAoBgB,GACpC,OAAQ,SAASvO,GACb,OAAKA,EACEuN,EAAOvN,GADOuO,CAEzB,CACJ,GAEA,qBACA,SAAehB,GACX,OAAQ,SAASnN,GACb,IAAKQ,MAAMC,QAAQT,GAAU,MAAM,IAAIsG,MAAM,gBAE7C,IAAMpG,EAAc,GAMpB,OAJAF,EAAMG,SAAQ,SAASP,GACnBM,EAAOzE,KAAK0R,EAAOvN,GACvB,IAEOM,CACX,CACJ,KAAC,EA5ciB,G,2SENhBlE,GAAS,IAAIC,EAAAA,GAAO6D,EAAAA,GAS1B,SAASsO,GAAWC,GACf,OAAa,MAATA,EAAwB,QACC,MAAzBpB,EAAAA,EAAAA,IAAcoB,IACdrS,GAAO2D,mBAAmB,gBAAiB,QAAS0O,GAEjDA,EAAM5B,cAClB,CAEA,SAAS6B,GAAgB7D,GAGrB,IADAA,EAASA,EAAOzG,QACTyG,EAAOjP,OAAS,GAAkC,MAA7BiP,EAAOA,EAAOjP,OAAS,IAAciP,EAAOxD,MAExE,OAAOwD,EAAOjI,KAAI,SAAC6L,GACf,GAAI7N,MAAMC,QAAQ4N,GAAQ,CAGtB,IAAME,EAAyC,CAAC,EAChDF,EAAMlO,SAAQ,SAACkO,GACXE,EAAOH,GAAWC,KAAU,CAChC,IAGA,IAAMvJ,EAAS0J,OAAOtJ,KAAKqJ,GAG3B,OAFAzJ,EAAOC,OAEAD,EAAO2J,KAAK,I,CAGnB,OAAOL,GAAWC,EAE1B,IAAGI,KAAK,IACZ,CAgBA,SAASC,GAAYC,GACjB,GAA0B,kBAAfA,EAAyB,CAGhC,GAFAA,EAAYA,EAAUlC,cAEW,MAA7BQ,EAAAA,EAAAA,IAAc0B,GACd,MAAO,MAAQA,EAGnB,IAAgC,IAA5BA,EAAUzR,QAAQ,KAClB,OAAOyR,C,KAGR,IAAInO,MAAMC,QAAQkO,GACrB,MAAO,YAAcL,GAAgBK,GAElC,GAAIC,EAAAA,GAAAA,YAAsBD,GAE7B,MADA3S,GAAO6S,KAAK,mBACN,IAAIvI,MAAM,mBAEb,GAAIqI,GAAmC,kBAAfA,EAC3B,MAAO,WAAaA,EAAU9F,SAAW,KAAO,IAAMyF,GAAgBK,EAAUlE,QAAU,G,CAG9F,MAAM,IAAInE,MAAM,mBAAqBqI,EACzC,CAKA,SAASG,KACL,OAAQ,IAAIC,MAAQD,SACxB,CAEA,SAASE,GAAMC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAChBC,WAAWD,EAASF,EACxB,GACJ,CAmBA,IAAMI,GAAiB,CAAE,QAAS,UAAW,UAAW,QAE3CC,GAAK,WAQd,WAAYC,EAAaC,EAAoBC,IAAa,gBACtDC,EAAAA,EAAAA,IAAehH,KAAM,MAAO6G,IAC5BG,EAAAA,EAAAA,IAAehH,KAAM,WAAY8G,IACjCE,EAAAA,EAAAA,IAAehH,KAAM,OAAQ+G,GAE7B/G,KAAKiH,kBAAoB,EACzBjH,KAAKkH,WAAY,CACrB,CAsCC,OAtCA,2BAED,WACI,OAAQlH,KAAKU,MACT,IAAK,KACF,OAAOV,KAAKO,KACf,IAAK,SACF,OAAOP,KAAK1C,OAEnB,OAAO0C,KAAK6G,GAChB,GAAC,gBAED,WACI,OAAO7G,KAAK6G,IAAIpJ,MAAM,KAAK,EAC/B,GAAC,gBAED,WACI,IAAMgC,EAAQO,KAAK6G,IAAIpJ,MAAM,KAC7B,MAAiB,OAAbgC,EAAM,GAAsB,KACzBA,EAAM,EACjB,GAAC,kBAED,WACI,IAAMA,EAAQO,KAAK6G,IAAIpJ,MAAM,KAC7B,GAAiB,WAAbgC,EAAM,GAAmB,OAAO,KACpC,IAhHmB7M,EAgHbuN,EAAUV,EAAM,GAEhBsC,EAjHG,MADUnP,EAkHc6M,EAAM,IAjHjB,GAEnB7M,EAAK6K,MAAM,MAAM3D,KAAI,SAAC6L,GACzB,GAAc,KAAVA,EAAgB,MAAO,GAE3B,IAAMlG,EAAQkG,EAAMlI,MAAM,KAAK3D,KAAI,SAAC6L,GAChC,MAAmB,SAAVA,EAAoB,KAAMA,CACvC,IAEA,OAA0B,IAAjBlG,EAAM3M,OAAgB2M,EAAM,GAAIA,CAC7C,IAwGUnC,EAAiB,CAAC,EAKxB,OAHIyE,EAAOjP,OAAS,IAAKwK,EAAOyE,OAASA,GACrC5B,GAAuB,MAAZA,IAAmB7C,EAAO6C,QAAUA,GAE5C7C,CACX,GAAC,sBAED,WACI,OAAQ0C,KAAK6G,IAAIrS,QAAQ,MAAQ,GAAKmS,GAAenS,QAAQwL,KAAK6G,MAAQ,CAC9E,KAAC,EArDa,GA4FZM,GAAgD,CAClD,EAAO,CAAEC,OAAQ,MAAQC,MAAO,EAAMC,KAAM,EAAMC,OAAQ,MAC1D,EAAO,CAAEH,OAAQ,MAAQC,MAAO,GAAMC,KAAM,GAAMC,OAAQ,OAC1D,EAAO,CAAEH,OAAQ,OAAQC,MAAO,GAAMC,KAAM,IAC5C,GAAO,CAAEF,OAAQ,MAAQI,IAAK,OAC9B,GAAO,CAAEJ,OAAQ,MAAQI,IAAK,OAC9B,IAAO,CAAEJ,OAAQ,OAAQI,IAAK,QAGlC,SAASC,GAAWvQ,GAChB,OAAOsN,EAAAA,EAAAA,IAAWX,EAAAA,GAAAA,KAAe3M,GAAOwQ,cAAe,GAC3D,CAGA,SAASC,GAAa/U,GAClB,OAAOgV,EAAAA,GAAAA,QAAc/H,EAAAA,EAAAA,IAAO,CAAEjN,GAAMwR,EAAAA,EAAAA,KAAayD,EAAAA,EAAAA,KAAOA,EAAAA,EAAAA,IAAOjV,IAAQ,EAAG,KAC9E,CAOA,IAAMkV,GAAc,IAAIC,OAAO,kBAAoB,KAC7CC,GAAW,CACb,IAAID,OAAO,mBAAqB,KAChC,IAAIA,OAAO,gBAAiB,KAC5BD,GACA,IAAIC,OAAO,mCAAoC,MAGnD,SAASE,GAAazQ,EAAgBgC,GAClC,IACI,OAAO0O,EAAAA,EAAAA,IAAaC,GAAY3Q,EAAQgC,GAC5B,CAAd,MAAMxF,GAAQ,CAChB,OAAO,IACX,CAEA,SAASmU,GAAY3Q,EAAgBgC,GACjC,GAAe,OAAXhC,EAAmB,OAAO,KAE9B,IAAMqC,EAASgK,EAAAA,GAAAA,MAAeO,EAAAA,EAAAA,IAAa5M,EAAQgC,EAAOA,EAAQ,KAAKsK,WACjEhR,EAAS+Q,EAAAA,GAAAA,MAAeO,EAAAA,EAAAA,IAAa5M,EAAQqC,EAAQA,EAAS,KAAKiK,WAEzE,OAAOM,EAAAA,EAAAA,IAAa5M,EAAQqC,EAAS,GAAIA,EAAS,GAAK/G,EAC3D,CAGA,SAASsV,GAAYC,GASjB,OARIA,EAAKC,MAAM,qBACXD,EAAOA,EAAKpE,UAAU,IACfoE,EAAKC,MAAM,eAClBD,EAAOA,EAAKpE,UAAU,GAEtB3Q,GAAO2D,mBAAmB,0BAA2B,OAAQoR,GAG1D,gCAAP,OAAyCA,EAC7C,CAEA,SAASE,GAAOrR,GACZ,IAAMM,GAASvE,EAAAA,EAAAA,IAASiE,GACxB,GAAIM,EAAO1E,OAAS,GAAM,MAAM,IAAI8K,MAAM,+BAE1C,IAAM4K,EAAS,IAAIpJ,WAAW,IAE9B,OADAoJ,EAAO/L,IAAIjF,EAAQ,GAAKA,EAAO1E,QACxB0V,CACX,CAEA,SAASC,GAASvR,GACd,GAAKA,EAAMpE,OAAS,KAAQ,EAAK,OAAOoE,EAExC,IAAMM,EAAS,IAAI4H,WAA0C,GAA/BrG,KAAK2P,KAAKxR,EAAMpE,OAAS,KAEvD,OADA0E,EAAOiF,IAAIvF,GACJM,CACX,CAGA,SAASmR,GAAYC,GAMjB,IALA,IAAMpR,EAA4B,GAE9BqR,EAAY,EAGPhW,EAAI,EAAGA,EAAI+V,EAAM9V,OAAQD,IAC9B2E,EAAOzE,KAAK,MACZ8V,GAAa,GAGjB,IAAK,IAAIhW,EAAI,EAAGA,EAAI+V,EAAM9V,OAAQD,IAAK,CACnC,IAAMD,GAAOK,EAAAA,EAAAA,IAAS2V,EAAM/V,IAG5B2E,EAAO3E,GAAK0V,GAAOM,GAGnBrR,EAAOzE,KAAKwV,GAAO3V,EAAKE,SACxB0E,EAAOzE,KAAK0V,GAAS7V,IACrBiW,GAAa,GAAmC,GAA9B9P,KAAK2P,KAAK9V,EAAKE,OAAS,G,CAG9C,OAAOgW,EAAAA,EAAAA,IAAUtR,EACrB,CAEO,IAAMuR,GAAQ,WAYjB,WAAYxU,EAAwB4L,EAAiB1L,EAAcuU,IAAwB,gBACvFhC,EAAAA,EAAAA,IAAehH,KAAM,WAAYzL,IACjCyS,EAAAA,EAAAA,IAAehH,KAAM,OAAQvL,IAC7BuS,EAAAA,EAAAA,IAAehH,KAAM,UAAWzL,EAAS0U,UAAU9I,QAAQA,KAC3D6G,EAAAA,EAAAA,IAAehH,KAAM,mBAAoBgJ,EAC7C,CAuVC,OAvVA,wCAED,WAAgB,WAgBZ,OAfKhJ,KAAKkJ,mBAENlJ,KAAKkJ,iBAAmBlJ,KAAKzL,SAASqD,KAAK,CACvC2J,GAAIvB,KAAKG,QACTvN,KAAM,+EACPuW,MAAK,SAAC3R,GACL,OAAOqM,EAAAA,GAAAA,KAAerM,GAAQ4R,GAAG,EACrC,IAAGC,OAAM,SAACrV,GACN,GAAIA,EAAMsV,OAAS/V,EAAAA,GAAAA,OAAAA,eAAgC,OAAO,EAG1D,MADA,EAAK2V,iBAAmB,KAClBlV,CACV,KAGGgM,KAAKkJ,gBAChB,GAAC,oBAEK,SAAOK,EAAkBC,G,0IAWvB,OAREC,EAAK,CACPlI,GAAIvB,KAAKG,QACTuJ,iBAAiB,EACjB9W,MAAMkW,EAAAA,EAAAA,IAAU,CAAES,EAAU5J,EAASK,KAAKvL,MAAQ+U,GAAc,QAIhEG,GAAa,EAAK,SACZ3J,KAAK4J,mBAAkB,kCAC7BD,GAAa,EAGbF,EAAG7W,MAAOkW,EAAAA,EAAAA,IAAU,CAAE,aAAcH,GAAY,EH9TlClU,EG8T8CuL,KAAKvL,MH7TlEqL,EAAAA,EAAAA,KAAQD,EAAAA,EAAAA,IAAON,EAAa9K,GAAMqF,KAAI,SAACwF,GAE1C,GAAIA,EAAKxM,OAAS,GACd,MAAM,IAAI8K,MAAM,sDAGpB,IAAM3F,EAAQ,IAAImH,WAAWE,EAAKxM,OAAS,GAG3C,OAFAmF,EAAMwE,IAAI6C,EAAM,GAChBrH,EAAM,GAAKA,EAAMnF,OAAS,EACnBmF,CAEX,MAAO,MGkTyEwR,EAAG7W,SAAW,OAIzE,OAJyE,mBAInEoN,KAAKzL,SAASqD,KAAK6R,GAAG,QAMW,OANhDjS,EAAS,EAAH,MACLvE,EAAAA,EAAAA,IAASuE,GAAQ1E,OAAS,KAAQ,GACnCQ,GAAOuW,WAAW,uBAAwBtW,EAAAA,GAAAA,OAAAA,eAA8B,CACpEoN,YAAa8I,EAAI7W,KAAM4E,IAG3BmS,IAAcnS,EAAS2Q,GAAY3Q,EAAQ,IAAK,kBAC7CA,GAAM,qCAET,KAAM8R,OAAS/V,EAAAA,GAAAA,OAAAA,eAA4B,0CAAW,MAAI,qDH3UpE,IAAoBkB,CG2UgD,uB,GAGrE,yBAEK,SAAY8U,EAAkBC,G,sIACjB,O,SAAMxJ,KAAK8J,OAAOP,EAAUC,GAAW,OAA1C,GACE,OADRhS,EAAS,EAAH,MACM,yCAAW2Q,GAAY3Q,EAAQ,IAAE,gCAC5C,MAAI,+C,GACd,yBAED,SAAYuS,EAAkBC,GAC1B,IAAMC,EAAW9C,GAAUhU,OAAO4W,IAQlC,GANgB,MAAZE,GACA3W,GAAOuW,WAAW,0BAAD,OAA4BE,GAAaxW,EAAAA,GAAAA,OAAAA,sBAAqC,CAC3F2W,UAAW,cAAF,OAAiBH,EAAS,OAItB,QAAjBE,EAASzC,IACT,OAAOxH,KAAKzL,SAAS0U,UAAU9I,QAAQ6J,GAG3C,IAAM/R,GAAQhF,EAAAA,EAAAA,IAAS+W,GAGvB,GAAsB,MAAlBC,EAAS5C,MAAe,CACxB,IAAMA,EAAQ2C,EAAS1B,MAAM,6CAC7B,GAAIjB,EAAO,CACP,IAAMvU,EAASkS,SAASqC,EAAM,GAAI,IAClC,GAAIA,EAAM,GAAGvU,SAAoB,EAATA,GAAcA,GAAU,GAAKA,GAAU,GAC3D,OAAO6U,IAAa9H,EAAAA,EAAAA,IAAO,CAAE,CAAEoK,EAAS5C,OAAU,KAAOA,EAAM,K,EAM3E,GAAqB,MAAjB4C,EAAS3C,KAAc,CACvB,IAAMA,EAAO0C,EAAS1B,MAAM,yCAC5B,GAAIhB,EAAM,CACN,IAAMxU,EAASkS,SAASsC,EAAK,GAAI,IACjC,GAAIA,EAAK,GAAGxU,SAAoB,EAATA,GAAcA,GAAU,GAAKA,GAAU,GAC1D,OAAO6U,IAAa9H,EAAAA,EAAAA,IAAO,CAAE,CAAEoK,EAAS3C,MAAS,KAAOA,EAAK,K,EAMzE,GAAuB,MAAnB2C,EAAS1C,OAAgB,CACzB,IAAMzU,EAASmF,EAAM,GAGjBb,EAAUa,EAAM,GASpB,GARgB,IAAZb,EACe,KAAXtE,GAA4B,KAAXA,IACjBsE,GAAW,GAGfA,GAAW,EAGXA,GAAW,GAAKa,EAAMnF,SAAW,EAAIA,GAAUA,GAAU,GAAKA,GAAU,GAAI,CAC5E,IAAMqX,EAAQC,KAAAA,QAAenS,EAAMqD,MAAM,IAEzC,OADA6O,EAAME,QAAQjT,GACPgT,KAAAA,OAAcH,EAAS1C,OAAQ4C,E,EAI9C,OAAO,IACX,GAAC,wBAGK,SAAWJ,G,0IAGb,GAFgB,MAAZA,IAAoBA,EAAW,IAGlB,KAAbA,EAAe,iBAGI,OAHJ,kBAGU/J,KAAK8J,OAAO,cAAa,OAAlC,GAGG,QAHTtS,EAAS,EAAH,OCheJ,uEDmeeA,EAAmB,yCAAW,MAAI,gCAElDwI,KAAKzL,SAAS0U,UAAUqB,YAAY9S,IAAO,qCAE9C,KAAM8R,OAAS/V,EAAAA,GAAAA,OAAAA,eAA4B,0CAAW,MAAI,2BAMrD,OANqD,UAM/CyM,KAAKuK,YAAY,aAAc9C,GAAWsC,IAAU,QAA7D,GAGE,OAHVC,EAAW,EAAH,OAGuB,OAAbA,EAAiB,0CAAW,MAAI,QAWvD,OANc,OAFT7J,EAAUH,KAAKwK,YAAYT,EAAUC,KAGvC1W,GAAOuW,WAAW,mCAAoCtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACvF2W,UAAW,cAAF,OAAiBH,EAAS,KACnCA,SAAUA,EACVnX,KAAMoX,IAEb,kBAEM7J,GAAO,yD,GACjB,uBAEK,W,oKAKiB,OAJbsK,EAAoD,CAAE,CAAE/J,KAAM,OAAQgK,QAAS1K,KAAKvL,OAAQ,kBAIzEuL,KAAK2K,QAAQ,UAAS,OAA/B,GACE,OADRC,EAAS,EAAH,MACM,yCAAW,MAAI,OAExB/X,EAAI,EAAC,YAAEA,EAAImV,GAASlV,QAAM,iBACQ,GAC1B,OADPwV,EAAQsC,EAAOtC,MAAMN,GAASnV,KACnB,wDAEXgY,EAASvC,EAAM,GAAGvE,cAAa,KAE7B8G,EAAM,OACL,UADK,KACE,GAIP,SAJO,KAID,GAIN,SAJM,KAIA,GAIN,WAJM,MAKN,YADQ,QACC,iBAZqC,OAA/CJ,EAAQ1X,KAAK,CAAE2N,KAAM,MAAOgK,QAASE,IAAU,kBACxC,CAAEH,QAAAA,EAASvV,IAAK0V,IAAQ,QAGiB,OAAhDH,EAAQ1X,KAAK,CAAE2N,KAAM,OAAQgK,QAASE,IAAU,kBACzC,CAAEH,QAAAA,EAASvV,IAAK0V,IAAQ,QAGiB,OAAhDH,EAAQ1X,KAAK,CAAE2N,KAAM,OAAQgK,QAASE,IAAU,kBACzC,CAAEH,QAAAA,EAASvV,IAAKkT,GAAYwC,KAAS,QASR,GAJ9BrB,EAAuB,WAAXsB,EAAuB,aAAc,aACvDJ,EAAQ1X,KAAK,CAAE2N,KAAMmK,EAAQH,QAASE,IAEtC,KACe5K,KAAK8K,iBAAgB,sBAAI,OAAJ,UAAU9K,KAAKmE,aAAY,4BAEtB,GAFnC4G,EAAQ,EAAH,GAGU,KADftL,GAAS6I,EAAM,IAAM,IAAI7K,MAAM,MAC3B3K,OAAY,0CAAW,MAAI,QAExB,OAFwB,UAElBkN,KAAKzL,SAAS0U,UAAU9I,QAAQV,EAAM,IAAG,QAG5D,GAHMuL,EAAO,EAAH,KACJC,GAAUzG,EAAAA,EAAAA,IAAWX,EAAAA,GAAAA,KAAepE,EAAM,IAAIiI,cAAe,IAGpD,WAAXmD,EAAmB,iBAEoC,OAFpC,KAEA7K,KAAKzL,SAAS0U,UAAS,UAAmBjJ,KAAKzL,SAASqD,KAAK,CAC5E2J,GAAIyJ,EAAMpY,MAAMkW,EAAAA,EAAAA,IAAU,CAAE,aAAcmC,MAC5C,QAFoD,GAEpD,YAFIC,EAAa,EAAH,GAA2BZ,YAAW,gBAGlDS,IAAUG,EAAU,0CAAW,MAAI,QACvCT,EAAQ1X,KAAK,CAAE2N,KAAM,QAASgK,QAASQ,IAAc,2BAEnC,YAAXL,EAAoB,iBAEI,OAFJ,KAEXhH,EAAAA,GAAS,UAAY7D,KAAKzL,SAASqD,KAAK,CACpD2J,GAAIyJ,EAAMpY,MAAMkW,EAAAA,EAAAA,IAAU,CAAE,cAActE,EAAAA,EAAAA,IAAWuG,EAAO,IAAKE,MACnE,QAF4B,GAE5B,cAFIE,EAAU,EAAH,GAAajK,KAAI,iBAGlB4D,SAAU,CAAF,yCAAW,MAAI,QACnC2F,EAAQ1X,KAAK,CAAE2N,KAAM,UAAWgK,QAASS,EAAQ1M,aAAc,QASpC,OALzBgL,EAAK,CACPlI,GAAIvB,KAAKzL,SAAS0U,UAAU9I,QAAQV,EAAM,IAC1C7M,MAAMkW,EAAAA,EAAAA,IAAU,CAAES,EAAU0B,KAC/B,KAEiBhD,GAAY,UAAOjI,KAAKzL,SAASqD,KAAK6R,GAAG,QAAG,GAAH,YACxC,OADf2B,GAAc,EAAH,WAA8C,IACtC,0CAAW,MAAI,QAiBrB,OAhBjBX,EAAQ1X,KAAK,CAAE2N,KAAM,oBAAqBgK,QAASU,IAGpC,YAAXP,IACAO,EAAcA,EAAYnG,QAAQ,OAAQgG,EAAQhH,UAAU,IAC5DwG,EAAQ1X,KAAK,CAAE2N,KAAM,wBAAyBgK,QAASU,KAIvDA,EAAY9C,MAAM,aAClB8C,EAAchD,GAAYgD,IAG9BX,EAAQ1X,KAAK,CAAE2N,KAAM,eAAgBgK,QAASU,IAE9C,WACuBC,EAAAA,EAAAA,IAAUD,GAAY,QAA/B,GAARE,EAAW,EAAH,KACC,CAAF,yCAAW,MAAI,QAIC,GAH7Bb,EAAQ1X,KAAK,CAAE2N,KAAM,WAAYgK,QAASa,KAAKC,UAAUF,KAIhC,kBADrBG,EAAWH,EAASI,OACS,0CAAW,MAAI,YAE5CD,EAASnD,MAAM,wBAAyB,CAAF,wCAIE,GAC5B,MADCmD,EAASnD,MAAMR,IACZ,0CAAW,MAAI,QAE/B2C,EAAQ1X,KAAK,CAAE2N,KAAM,WAAYgK,QAASe,IAC1CA,EAAWrD,GAAYqD,GAAU,QAGY,OAAjDhB,EAAQ1X,KAAK,CAAE2N,KAAM,MAAOgK,QAASe,IAAY,kBAE1C,CAAEhB,QAAAA,EAASvV,IAAKuW,IAAU,QAjGR5Y,IAAG,0GAuGrC,MAAI,yD,GACd,4BAEK,W,sJAGe,O,SAAMmN,KAAKuK,YAAY,cAAa,OAAvC,GAGE,OAHVP,EAAW,EAAH,OAGuB,OAAbA,EAAiB,yCAAW,MAAI,OAGoC,KAAtF2B,EAAO3B,EAAS1B,MAAM,kEAClB,CAAF,gBACgC,GAA9BxV,EAASkS,SAAS2G,EAAK,GAAI,IAC7BA,EAAK,GAAG7Y,SAAoB,EAATA,EAAU,0CACtB,UAAa8U,EAAAA,GAAAA,OAAc,KAAO+D,EAAK,KAAG,QAKmC,KAAtFC,EAAO5B,EAAS1B,MAAM,kEAClB,CAAF,gBACgC,GAA9BxV,EAASkS,SAAS4G,EAAK,GAAI,IAC7BA,EAAK,GAAG9Y,SAAoB,EAATA,EAAU,0CACtB,UAAa8U,EAAAA,GAAAA,OAAc,KAAOgE,EAAK,KAAG,QAKI,KAAvDC,EAAQ7B,EAAS1B,MAAM,kCAClB,CAAF,mBACoB,KAArBuD,EAAM,GAAG/Y,OAAmB,0CACrB,SAAY+Y,EAAM,IAAE,QAIqB,KAAlDC,EAAS9B,EAAS1B,MAAM,4BAClB,CAAF,mBACoB,KAAtBwD,EAAO,GAAGhZ,OAAmB,iBAGsD,OAD7EiZ,EAAkC,CAAE,IAAK,GAAI,IAAK,IAAK,IAAK,KAC5DxL,GAAOyL,EAAAA,EAAAA,GAAa,KAAOF,EAAO,IAAI7G,QAAQ,WAAW,SAACtL,GAAC,OAAMoS,EAAQpS,EAAE,IAAE,kBAC5E,SAAY4G,GAAI,iCAIxBjN,GAAOuW,WAAW,2CAA4CtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACtG2W,UAAW,mBACXtX,KAAMoX,KACR,gD,GACL,qBAEK,SAAQ3E,G,wIAcO,OAXb4G,GAAWzM,EAAAA,EAAAA,IAAY6F,IAI3B4G,GAAWpM,EAAAA,EAAAA,IAAO,CAAE4H,GAAW,IAAKA,GAAWwE,EAASnZ,QAASmZ,KAGnDnZ,OAAS,KAAQ,IAC3BmZ,GAAWpM,EAAAA,EAAAA,IAAO,CAAEoM,GAAUzH,EAAAA,EAAAA,IAAW,KAAM,GAAMa,EAAIvS,OAAS,OACrE,SAEsBkN,KAAKuK,YAAY,cAAczK,EAAAA,EAAAA,IAAQmM,IAAU,OAA1D,GACE,OADVjC,EAAW,EAAH,OACuB,OAAbA,EAAiB,yCAAW,MAAI,iCAEjD9B,EAAAA,EAAAA,IAAa8B,IAAS,+C,KAChC,EAxWgB,GA2WjBkC,GAA8B,KAE9BC,GAAa,EAEJC,GAAa,0CAiDtB,WAAY3Y,GAAsC,MAkB9C,IAlB8C,gBAC9C,gBAGK4Y,QAAU,GAEf,EAAKC,SAAW,CAAE3J,OAAQ,GAE1B,EAAK4J,iBAAkB,EAEvB,EAAKtD,WAAY,2CAAWuD,gBAK5BxF,EAAAA,EAAAA,KAAe,UAAM,aAA2B,QAAZvT,GAChC,EAAKgZ,aAAchZ,EAAU,EAAKiZ,iBAElCjZ,aAAmB+S,QACnB,EAAKmG,gBAAkBlZ,EAGvBA,EAAQ4V,OAAM,SAACrV,GAAY,IAG3B,EAAK4Y,SAASvD,OAAM,SAACrV,GAAY,QAE9B,CACH,IAAM6Y,GAAeC,EAAAA,EAAAA,IAAS,0CAA+C,aAAxDA,CAAsErZ,GACvFoZ,IACA7F,EAAAA,EAAAA,KAAe,UAAM,WAAY6F,GACjC,EAAKE,KAAK,UAAWF,EAAc,OAGnCvZ,GAAO2D,mBAAmB,kBAAmB,UAAWxD,E,CAWxC,OAPxB,EAAKuZ,yBAA2B,KAEhC,EAAK/F,kBAAoB,EACzB,EAAKgG,qBAAuB,GAE5B,EAAKC,iBAAmB,IAExB,EAAKC,eAAiB,EAAE,CAC5B,CAgEC,OAhEA,8BAEK,W,yIACmB,MAAjBnN,KAAKoN,SAAgB,iBACM,GAAvB3Z,EAAmB,MACnBuM,KAAK2M,gBAAiB,CAAF,gBAEN,OAFM,kBAEA3M,KAAK2M,gBAAe,OAApClZ,EAAU,EAAH,gEAKA,MAAXA,EAAe,iBACL,OADK,UACCuM,KAAK0M,gBAAe,QAApCjZ,EAAU,EAAH,aAKNA,GACDH,GAAOuW,WAAW,sBAAuBtW,EAAAA,GAAAA,OAAAA,cAA6B,CAAC,GAItD,MAAjByM,KAAKoN,WACDpN,KAAKyM,WACLzM,KAAKoN,SAAW3Z,GAEhBuT,EAAAA,EAAAA,IAAehH,KAAM,WAAYvM,GAErCuM,KAAK+M,KAAK,UAAWtZ,EAAS,OACjC,iCAGEuM,KAAKoN,UAAQ,wD,GAKxB,iBACA,WAAS,WACL,OAAOC,EAAAA,EAAAA,KAAK,WACR,OAAO,EAAKT,SAASzD,MAAK,SAAC1V,GACvB,OAAOA,CACX,IAAG,SAACO,GAEA,GAAIA,EAAMsV,OAAS/V,EAAAA,GAAAA,OAAAA,eAA+C,cAAhBS,EAAMsZ,MAGxD,MAAMtZ,CACV,GACJ,GACJ,GAEA,2BAaM,SAAcyV,EAAiB8D,EAAkBC,G,0JAC/CxN,KAAKuM,iBAAmC,IAAhBiB,EAAK1a,OAAY,yCAAW,MAAI,OAEtD2a,EAAShE,EAAGlI,GAAGwC,cACfnR,EAAO2a,EAASxJ,cAEhB2J,EAA+B,GAE5B7a,EAAI,EAAC,YAAEA,EAAI2a,EAAK1a,QAAM,iBASZ,OARToC,EAAMsY,EAAK3a,GAGX8a,EAAOzY,EAAI+P,QAAQ,WAAYwI,GAAQxI,QAAQ,SAAUrS,GAGzDgb,EAAuB1Y,EAAIV,QAAQ,WAAa,EAAK,KAAM+W,KAAKC,UAAU,CAAE5Y,KAAAA,EAAM6a,OAAAA,IAAS,WAE5EpC,EAAAA,EAAAA,IAAU,CAAEnW,IAAKyY,EAAME,kBAAkB,GAAQD,GAAM,SAAC1W,EAAO4W,GAEhF,OADA5W,EAAMwL,OAASoL,EAASC,WACjB7W,CACX,IAAE,QAHU,KAANM,EAAS,EAAH,MAKD5E,KAAM,CAAF,yCAAW4E,EAAO5E,MAAI,QAIrC,GAFMob,EAAgBxW,EAAOuG,SAAW,kBAGpCvG,EAAOkL,QAAU,KAAOlL,EAAOkL,OAAS,KAAG,0CACpCpP,GAAOuW,WAAW,yCAAD,OAA2CmE,GAAiBza,EAAAA,GAAAA,OAAAA,aAA4B,CAAE2B,IAAAA,EAAK8Y,aAAAA,KAAe,QAI1IN,EAAc3a,KAAKib,GAAc,QAxBJnb,IAAG,gDA2B7BS,GAAOuW,WAAW,wCAAD,OAA0C6D,EAAc5T,KAAI,SAACgB,GAAC,OAAKyQ,KAAKC,UAAU1Q,EAAE,IAAEiL,KAAK,OAAUxS,EAAAA,GAAAA,OAAAA,aAA4B,CACrJia,KAAAA,EAAME,cAAAA,KACR,gD,GAIN,qCACM,SAAwBO,G,mJAC1B,O,SAAMjO,KAAK4M,SAAQ,YAGfqB,EAAS,GAAC,4BAGHjO,KAAKkO,qBAAsB,CAAF,gBAOT,OAJbC,EAAsBnO,KAAKkO,qBAAoB,kBAI5BC,EAAmB,OAA5B,GAAN3W,EAAS,EAAH,OACP4O,KAAY5O,EAAO4W,UAAaH,GAAM,0CAChCzW,EAAOuJ,aAAW,yEAYzBf,KAAKkO,uBAAyBC,EAAmB,4EAyCzD,OAlCFE,EAAUjI,KAEVkI,GAA2BC,EAAAA,EAAAA,IAAkB,CAC/CxN,YAAaf,KAAKwO,QAAQ,iBAAkB,CAAC,GAC7CC,aAAczO,KAAKjJ,aAAaoS,MAAK,SAAC1V,GAAO,OAAM,IAAI,IAAG,SAACO,GAAK,OAAMA,CAAK,MAC5EmV,MAAK,YAAkC,IAA/BpI,EAAW,EAAXA,YAAa0N,EAAY,EAAZA,aACpB,GAAIA,EAKA,MAHI,EAAKP,uBAAyBI,IAC9B,EAAKJ,qBAAuB,MAE1BO,EAGV,IAAML,EAAWhI,KAOjB,OALArF,EAAc8C,EAAAA,GAAAA,KAAe9C,GAAa+C,YACxB,EAAKkJ,0BAA2BjM,EAAc,EAAKiM,yBAErE,EAAKA,wBAA0BjM,EAC/B,EAAK2N,oBAAoB3N,GAClB,CAAEA,YAAAA,EAAasN,QAAAA,EAASD,SAAAA,EACnC,IAEApO,KAAKkO,qBAAuBI,EAG5BA,EAAyBjF,OAAM,SAACrV,GAExB,EAAKka,uBAAyBI,IAC9B,EAAKJ,qBAAuB,KAEpC,IAAG,UAEWI,EAAwB,wCAAEvN,aAAW,yD,GACtD,kBAEK,W,mJAQgB,OAPZ4N,EAASxC,KAGTyC,EAAgC,GAElC7N,EAAsB,KAAI,kBAENf,KAAK6O,wBAAwB,IAAM7O,KAAK8O,gBAAkB,GAAE,OAAhF/N,EAAc,EAAH,4BAEe,OAFf,yBAEXf,KAAK+M,KAAK,QAAS,EAAF,IAAS,2BAQ9B,GALA/M,KAAK0O,oBAAoB3N,GAGzBf,KAAK+M,KAAK,OAAQ4B,EAAQ5N,GAGtBA,IAAgBf,KAAKiH,iBAAgB,iBACR,OAA7BjH,KAAK+M,KAAK,UAAW4B,GAAQ,2BASjC,IAJ6B,IAAzB3O,KAAKsM,SAAS3J,QACd3C,KAAKsM,SAAS3J,MAAQ5B,EAAc,GAGpChI,KAAKgW,IAAc/O,KAAKsM,SAAS3J,MAAU5B,GAAe,IAC1DzN,GAAO6S,KAAK,+DAAD,OAAiEnG,KAAKsM,SAAS3J,MAAM,uBAAgB5B,EAAY,MAC5Hf,KAAK+M,KAAK,QAASzZ,GAAO0b,UAAU,8BAA+Bzb,EAAAA,GAAAA,OAAAA,cAA6B,CAC5FwN,YAAaA,EACbuM,MAAO,YACP2B,oBAAqBjP,KAAKsM,SAAS3J,SAEvC3C,KAAK+M,KAAK,QAAShM,QAInB,IAASlO,EAAamN,KAAKsM,SAAS3J,MAAS,EAAG9P,GAAKkO,EAAalO,IAC9DmN,KAAK+M,KAAK,QAASla,GAiHyB,OA5GvCmN,KAAKsM,SAAS3J,QAAW5B,IAClCf,KAAKsM,SAAS3J,MAAQ5B,EAEtB+E,OAAOtJ,KAAKwD,KAAKsM,UAAU7U,SAAQ,SAAC4N,GAEhC,GAAY,UAARA,EAAJ,CAGA,IAAM6J,EAAmB,EAAK5C,SAASjH,GAKd,YAArB6J,GAIAnO,EAAcmO,EAAmB,WAC1B,EAAK5C,SAASjH,E,CAE7B,MAI2B,IAA3BrF,KAAKiH,mBACLjH,KAAKiH,iBAAmBlG,EAAc,GAG1Cf,KAAKqM,QAAQ5U,SAAQ,SAAC6V,GAClB,OAAQA,EAAM5M,MACV,IAAK,KACD,IAAMH,EAAO+M,EAAM/M,KACf4O,EAAS,EAAKC,sBAAsB7O,GAAM4I,MAAK,SAACjH,GAChD,OAAKA,GAAkC,MAAvBA,EAAQnB,aACxB,EAAKuL,SAAS,KAAO/L,GAAQ2B,EAAQnB,YACrC,EAAKgM,KAAKxM,EAAM2B,GACT,MAH+C,IAI1D,IAAGmH,OAAM,SAACrV,GAAmB,EAAK+Y,KAAK,QAAS/Y,EAAQ,IAExD4a,EAAQ7b,KAAKoc,GAEb,MAGJ,IAAK,SAED,IAAK7B,EAAMpG,UAAW,CAClBoG,EAAMpG,WAAY,GAIc,IAA5BoG,EAAMrG,mBACNqG,EAAMrG,iBAAmBlG,EAAc,GAO3C,IAAMzD,EAASgQ,EAAMhQ,OACrBA,EAAOgG,UAAYgK,EAAMrG,iBAAmB,EAC5C3J,EAAOiG,QAAUxC,EAIjB,IAAMsO,EAAe/R,EAAOiG,QAAU,EAAK0J,qBACvCoC,EAAe/R,EAAOgG,YAAahG,EAAOgG,UAAY+L,GAEtD/R,EAAOgG,UAAY,IAAKhG,EAAOgG,UAAY,GAE/C,IAAM6L,EAAS,EAAKG,QAAQhS,GAAQ6L,MAAK,SAAC5G,GAEtC+K,EAAMpG,WAAY,EAEE,IAAhB3E,EAAKzP,QAETyP,EAAK9K,SAAQ,SAAC8X,GAGNA,EAAIxO,YAAcuM,EAAMrG,mBACxBqG,EAAMrG,iBAAmBsI,EAAIxO,aAIjC,EAAKuL,SAAS,KAAOiD,EAAIzO,WAAayO,EAAIxO,YAC1C,EAAKuL,SAAS,KAAOiD,EAAIzN,iBAAmByN,EAAIxO,YAEhD,EAAKgM,KAAKzP,EAAQiS,EACtB,GACJ,IAAGlG,OAAM,SAACrV,GACN,EAAK+Y,KAAK,QAAS/Y,GAGnBsZ,EAAMpG,WAAY,CACtB,IACA0H,EAAQ7b,KAAKoc,E,EAM7B,IAEAnP,KAAKiH,iBAAmBlG,EAGxByF,QAAQgJ,IAAIZ,GAASzF,MAAK,WACtB,EAAK4D,KAAK,UAAW4B,EACzB,IAAGtF,OAAM,SAACrV,GAAY,EAAK+Y,KAAK,QAAS/Y,EAAQ,IAAG,2E,GAKxD,8BACA,SAAiB+M,GACbf,KAAKiH,iBAAmBlG,EAAc,EAClCf,KAAKyP,SAAWzP,KAAKqN,MAC7B,GAAC,mBAED,WACI,OAAOrN,KAAKoN,QAChB,GAGA,2BACM,W,yJACK9Z,GAAOuW,WAAW,8CAA+CtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACzG2W,UAAW,4BACb,0C,GACL,wBAEK,W,0IACc,O,SAAMlK,KAAK4M,SAAQ,OAKZ,OALjBnZ,EAAU,EAAH,cAKgBuM,KAAK0M,gBAAe,OAA7B,GAAdgD,EAAiB,EAAH,KAChBjc,EAAQ4B,UAAYqa,EAAera,QAAO,qBAItC2K,KAAKyM,WAAY,CAAF,gBAgBf,OAfAzM,KAAKoN,SAAWsC,EAGhB1P,KAAKiH,kBAAoB,EACzBjH,KAAK2P,iBAAmB,KACxB3P,KAAK4P,wBAA0B,KAC/B5P,KAAKmN,eAAiB,EACtBnN,KAAKsM,SAAS3J,OAAS,EACvB3C,KAAKgN,yBAA2B,KAChChN,KAAKkO,qBAAuB,KAK5BlO,KAAK+M,KAAK,UAAW2C,EAAgBjc,GAAS,UACxC6S,GAAM,GAAE,iCAEPtG,KAAKoN,UAAQ,QASE,MANpBpZ,EAAQV,GAAO0b,UAAU,6BAA8Bzb,EAAAA,GAAAA,OAAAA,cAA6B,CACtF+Z,MAAO,UACP7Z,QAASA,EACToc,gBAAiBH,IAGrB1P,KAAK+M,KAAK,QAAS/Y,GACbA,EAAK,iCAGRP,GAAO,gD,GACjB,uBAED,WAAe,WAKX,OAJAuM,KAAK6O,wBAAwB,IAAM7O,KAAK8O,gBAAkB,GAAG3F,MAAK,SAACpI,GAC/D,EAAK2N,oBAAoB3N,EAC7B,IAAG,SAAC/M,GAAY,IAEiB,MAAzBgM,KAAK2P,iBAA4B3P,KAAK2P,kBAAmB,CACrE,GAAC,mBAED,WACI,OAAwB,MAAhB3P,KAAK8P,OACjB,EAAC,IAED,SAAY5Y,GAAc,WAClBA,IAAU8I,KAAK8P,SACf9P,KAAK8P,QAAUC,aAAY,WAAQ,EAAK1C,MAAQ,GAAGrN,KAAK8O,iBAEnD9O,KAAKgQ,iBACNhQ,KAAKgQ,eAAiBtJ,YAAW,WAC7B,EAAK2G,OAIL,EAAK2C,eAAiBtJ,YAAW,WAGxB,EAAKoJ,SAAW,EAAKzC,OAG1B,EAAK2C,eAAiB,IAC1B,GAAG,EAAKlB,gBACZ,GAAG,MAGC5X,GAAS8I,KAAK8P,UACtBG,cAAcjQ,KAAK8P,SACnB9P,KAAK8P,QAAU,KAEvB,GAAC,2BAED,WACI,OAAO9P,KAAKkN,gBAChB,EAAC,IAED,SAAoBhW,GAAa,WAC7B,GAAsB,kBAAXA,GAAuBA,GAAS,GAAK8N,SAAS7R,OAAO+D,KAAWA,EACvE,MAAM,IAAI0G,MAAM,4BAGpBoC,KAAKkN,iBAAmBhW,EAEpB8I,KAAK8P,UACLG,cAAcjQ,KAAK8P,SACnB9P,KAAK8P,QAAUC,aAAY,WAAQ,EAAK1C,MAAQ,GAAGrN,KAAKkN,kBAEhE,GAAC,iCAED,WAAmB,WACTgD,EAAM9J,KAaZ,OAVK8J,EAAMlQ,KAAKmN,eAAkB,EAAInN,KAAKkN,mBACvClN,KAAKmN,eAAiB+C,EACtBlQ,KAAK4P,wBAA0B5P,KAAKmQ,iBAAiBhH,MAAK,SAACpI,GAIvD,OAH6B,MAAzB,EAAK4O,kBAA4B5O,EAAc,EAAK4O,oBACpD,EAAKA,iBAAmB5O,GAErB,EAAK4O,gBAChB,KAGG3P,KAAK4P,uBAChB,GAAC,iCAED,SAAoB7O,GAEa,MAAzBf,KAAK2P,kBAA4B5O,EAAcf,KAAK2P,mBAGxD3P,KAAKmN,eAAiB/G,MAGO,MAAzBpG,KAAK2P,kBAA4B5O,EAAcf,KAAK2P,oBACpD3P,KAAK2P,iBAAmB5O,EACxBf,KAAK4P,wBAA0BpJ,QAAQC,QAAQ1F,IAEvD,GAAC,gCAEK,SAAmBe,EAAyBb,EAAwBmP,G,yJAC/DpQ,KAAKqQ,oBAAoBvO,EAAmC,MAAjBb,EAAyB,EAAGA,EAAemP,GAAW,EAAG,OAAK,+C,GACnH,iCAEK,SAAoBtO,EAAyBb,EAAuBmP,EAAiBE,G,6IACvE,O,SAAMtQ,KAAKoP,sBAAsBtN,GAAgB,OAApD,OAAPI,EAAU,EAAH,MAGEA,EAAQjB,cAAe,IAAMA,GAAa,yCAAWiB,GAAO,gCAGpE,IAAIsE,SAAQ,SAACC,EAAS8J,GACzB,IAAMC,EAAiC,GAEnCC,GAAO,EACLC,EAAc,WAChB,QAAID,IACJA,GAAO,EACPD,EAAY/Y,SAAQ,SAAC/D,GAAWA,GAAQ,KACjC,EACX,EAEMid,EAAe,SAACzO,GACdA,EAAQjB,cAAgBA,GACxByP,KACJjK,EAAQvE,EACZ,EAIA,GAHA,EAAK0O,GAAG9O,EAAiB6O,GACzBH,EAAYzd,MAAK,WAAQ,EAAK8d,eAAe/O,EAAiB6O,EAAe,IAEzEL,EAAa,CACb,IAAIQ,EAAkBR,EAAYS,WAC9BC,EAAuB,KACrBC,EAAiB,SAAjBA,EAAwBlQ,GAAmB,OAAImQ,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,qFAC7CT,EAAM,CAAF,gDAKR,OALQ,SAKFnK,GAAM,KAAK,OAEjBtG,KAAKmR,oBAAoBb,EAAYpP,MAAMiI,MAAK,SAAO3H,GAAK,OAAI0P,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,0FACxDT,EAAM,CAAF,qDAEJjP,GAAS8O,EAAY9O,OAAK,gBAC1BsP,EAAkB/P,EAAY,uBAKZ,OALY,SAKNf,KAAKoR,eAAetP,GAAgB,OAA7C,KAALuP,EAAQ,EAAH,OACuB,MAArBA,EAAMtQ,YAAmB,mDAOtB,MAAhBiQ,IACAA,EAAeF,EAAkB,GACdR,EAAYS,aAC3BC,EAAeV,EAAYS,YAElC,aAEMC,GAAgBjQ,GAAW,qBAC1B0P,EAAM,CAAF,kDAEM,OAFN,UAEYzQ,KAAKsR,yBAAyBN,GAAa,QAAzDrO,EAAQ,EAAH,KACF4O,EAAK,EAAC,aAAEA,EAAK5O,EAAMM,aAAanQ,QAAM,iBAG3C,IAFM2W,EAAK9G,EAAMM,aAAasO,IAGvBhR,OAASuB,EAAe,sDAG3B2H,EAAGvI,OAASoP,EAAYpP,MAAQuI,EAAGjI,QAAU8O,EAAY9O,MAAK,qBAC1DiP,EAAM,CAAF,kDAGQ,OAHR,UAGczQ,KAAKwR,mBAAmB/H,EAAGlJ,KAAMU,GAAc,QAAxD,GAAPiB,EAAU,EAAH,MAGTwO,IAAe,CAAF,kDAiBb,OAdAe,EAAS,WACThI,EAAG7W,OAAS0d,EAAY1d,MAAQ6W,EAAGlI,KAAO+O,EAAY/O,IAAMkI,EAAGvS,MAAMkS,GAAGkH,EAAYpZ,OACpFua,EAAS,WACW,OAAZhI,EAAG7W,MAAiB6W,EAAGvI,OAASuI,EAAGlI,IAAMkI,EAAGvS,MAAM4N,WAC1D2M,EAAS,aAIblB,EAAOjd,GAAO0b,UAAU,2BAA4Bzb,EAAAA,GAAAA,OAAAA,qBAAoC,CACpFme,UAAuB,aAAXD,GAAoC,cAAXA,EACrCA,OAAAA,EACAE,YAAa3R,KAAK4R,iBAAiBnI,GACnClJ,KAAMuB,EACNI,QAAAA,KACA,2BA/BqCqP,IAAI,wBAoCrDP,IAAe,4BAInBP,EAAM,CAAF,kDACRzQ,KAAK+G,KAAK,QAASkK,GAAgB,gDAEtC,IAAE,SAACjd,GACIyc,GACJ,EAAK1J,KAAK,QAASkK,EACvB,IAAG,+CACN,EAED,GAAIR,EAAQ,OACZ,EAAK1J,KAAK,QAASkK,GAEnBT,EAAYzd,MAAK,WACb,EAAK8d,eAAe,QAASI,EACjC,G,CAGJ,GAAwB,kBAAbb,GAAyBA,EAAU,EAAG,CAC7C,IAAMyB,EAAQnL,YAAW,WACjBgK,KACJH,EAAOjd,GAAO0b,UAAU,mBAAoBzb,EAAAA,GAAAA,OAAAA,QAAuB,CAAE6c,QAASA,IAClF,GAAGA,GACCyB,EAAMC,OAASD,EAAMC,QAEzBtB,EAAYzd,MAAK,WAAQgf,aAAaF,EAAQ,G,CAEtD,KAAE,+C,GACL,4BAEK,W,yJACK7R,KAAK6O,wBAAwB,IAAE,+C,GACzC,yBAEK,W,sIACF,O,SAAM7O,KAAKjJ,aAAY,OAER,OAFQ,SAEFiJ,KAAKwO,QAAQ,cAAe,CAAC,GAAG,OAAzC,OAANhX,EAAS,EAAH,gCAEDqM,EAAAA,GAAAA,KAAerM,IAAO,yDAEtBlE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,cACRxa,OAAAA,EAAQxD,MAAK,QACf,wD,GAET,wBAEK,SAAWie,EAAyC3R,G,wIACtD,O,SAAMN,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CACnCpO,QAASH,KAAKwK,YAAYyH,GAC1B3R,SAAUN,KAAKkS,aAAa5R,KAC9B,OAEa,OALT6R,EAAS,EAAH,cAKSnS,KAAKwO,QAAQ,aAAc2D,GAAO,OAA3C,OAAN3a,EAAS,EAAH,gCAEDqM,EAAAA,GAAAA,KAAerM,IAAO,2DAEtBlE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,aACRG,OAAAA,EAAQ3a,OAAAA,EAAQxD,MAAK,QACvB,yD,GAET,iCAEK,SAAoBie,EAAyC3R,G,wIAC/D,O,SAAMN,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CACnCpO,QAASH,KAAKwK,YAAYyH,GAC1B3R,SAAUN,KAAKkS,aAAa5R,KAC9B,OAEa,OALT6R,EAAS,EAAH,cAKSnS,KAAKwO,QAAQ,sBAAuB2D,GAAO,OAApD,OAAN3a,EAAS,EAAH,gCAEDqM,EAAAA,GAAAA,KAAerM,GAAQsM,YAAU,2DAEjCxQ,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,sBACRG,OAAAA,EAAQ3a,OAAAA,EAAQxD,MAAK,QACvB,yD,GAET,qBAEK,SAAQie,EAAyC3R,G,wIACnD,O,SAAMN,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CACnCpO,QAASH,KAAKwK,YAAYyH,GAC1B3R,SAAUN,KAAKkS,aAAa5R,KAC9B,OAEa,OALT6R,EAAS,EAAH,cAKSnS,KAAKwO,QAAQ,UAAW2D,GAAO,OAAxC,OAAN3a,EAAS,EAAH,iCAEDsI,EAAAA,EAAAA,IAAQtI,IAAO,2DAEflE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,UACRG,OAAAA,EAAQ3a,OAAAA,EAAQxD,MAAK,QACvB,yD,GAET,0BAEK,SAAaie,EAAyCG,EAAgD9R,G,wIACxG,O,SAAMN,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CACnCpO,QAASH,KAAKwK,YAAYyH,GAC1B3R,SAAUN,KAAKkS,aAAa5R,GAC5B8R,SAAU5L,QAAQC,QAAQ2L,GAAUjJ,MAAK,SAACkJ,GAAC,OAAK/N,EAAAA,EAAAA,IAAS+N,EAAE,MAC7D,OACa,OALTF,EAAS,EAAH,cAKSnS,KAAKwO,QAAQ,eAAgB2D,GAAO,OAA7C,OAAN3a,EAAS,EAAH,iCAEDsI,EAAAA,EAAAA,IAAQtI,IAAO,2DAEflE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,eACRG,OAAAA,EAAQ3a,OAAAA,EAAQxD,MAAK,QACvB,yD,GAIV,8BACA,SAAiByV,EAAiBlJ,EAAewQ,GAAmB,WAChE,GAAY,MAARxQ,GAAwC,MAAxBgE,EAAAA,EAAAA,IAAchE,GAAgB,MAAM,IAAI3C,MAAM,sCAElE,IAAMpG,EAA8BiS,EAwCpC,OArCY,MAARlJ,GAAgBkJ,EAAGlJ,OAASA,GAC5BjN,GAAOuW,WAAW,2DAA4DtW,EAAAA,GAAAA,OAAAA,cAA6B,CAAE+e,aAAc7I,EAAGlJ,KAAMgS,aAAchS,IAGtJ/I,EAAOgb,KAAO,SAAOC,EAAmBrC,GAAgB,OAAIc,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,8EAiBxC,OAhBA,MAAZuB,IAAoBA,EAAW,GACpB,MAAXrC,IAAmBA,EAAU,GAG7BuB,OAAc3W,EACD,IAAbyX,GAAgC,MAAd1B,IAClBY,EAAc,CACV/e,KAAM6W,EAAG7W,KACTsO,KAAMuI,EAAGvI,KACTM,MAAOiI,EAAGjI,MACVD,GAAIkI,EAAGlI,GACPrK,MAAOuS,EAAGvS,MACV6Z,WAAAA,IAEP,SAEqB/Q,KAAKqQ,oBAAoB5G,EAAGlJ,KAAMkS,EAAUrC,EAASuB,GAAY,OAA1E,GACE,OADTzP,EAAU,EAAH,OACuB,IAAbuQ,EAAc,yCAAW,MAAI,OAWnD,OARDzS,KAAKsM,SAAS,KAAO7C,EAAGlJ,MAAQ2B,EAAQnB,YAEjB,IAAnBmB,EAAQQ,QACRpP,GAAOuW,WAAW,qBAAsBtW,EAAAA,GAAAA,OAAAA,eAA8B,CAClEuO,gBAAiB2H,EAAGlJ,KACpBI,YAAa8I,EACbvH,QAASA,IAEhB,kBACMA,GAAO,gDACjB,EAEM1K,CACX,GAAC,6BAEK,SAAgBkb,G,4IAClB,O,SAAM1S,KAAKjJ,aAAY,OACT,OADS,SACHyP,QAAQC,QAAQiM,GAAmBvJ,MAAK,SAAAwJ,GAAC,OAAI7S,EAAAA,EAAAA,IAAQ6S,EAAE,IAAC,OAGxD,OAHdC,EAAQ,EAAH,KAEa,OADlBnJ,EAAKzJ,KAAKiJ,UAAUtI,YAAY+R,IAC/BzR,gBAAyBwI,EAAGxI,cAAgB,GAAI,SAC7BjB,KAAK6O,wBAAwB,IAAM,EAAI7O,KAAK8O,iBAAgB,OAErE,OAFX/N,EAAc,EAAH,yBAEMf,KAAKwO,QAAQ,kBAAmB,CAAEkE,kBAAmBE,IAAQ,QAAtE,OAAJrS,EAAO,EAAH,uBACHP,KAAK4R,iBAAiBnI,EAAIlJ,EAAMQ,IAAY,QAGZ,MAHY,2BAE7C,KAAOJ,YAAc8I,EACrB,KAAO3H,gBAAkB2H,EAAGlJ,KAAK,+D,GAG9C,oCAEK,SAAuBI,G,+IACL,O,SAAMA,EAAW,OA4BI,OA5BnCkS,EAAM,OAENpJ,EAAU,CAAC,EAEjB,CAAC,OAAQ,MAAMhS,SAAQ,SAAC4N,GACD,MAAfwN,EAAOxN,KACXoE,EAAGpE,GAAOmB,QAAQC,QAAQoM,EAAOxN,IAAM8D,MAAK,SAACjR,GAAC,OAAMA,EAAI,EAAKsS,YAAYtS,GAAI,IAAI,IACrF,IAEA,CAAC,WAAY,WAAY,eAAgB,uBAAwB,SAAST,SAAQ,SAAC4N,GAC5D,MAAfwN,EAAOxN,KACXoE,EAAGpE,GAAOmB,QAAQC,QAAQoM,EAAOxN,IAAM8D,MAAK,SAACjR,GAAC,OAAMA,EAAI2L,EAAAA,GAAAA,KAAe3L,GAAI,IAAI,IACnF,IAEA,CAAC,QAAQT,SAAQ,SAAC4N,GACK,MAAfwN,EAAOxN,KACXoE,EAAGpE,GAAOmB,QAAQC,QAAQoM,EAAOxN,IAAM8D,MAAK,SAACjR,GAAC,OAAY,MAALA,EAAaA,EAAG,IAAI,IAC7E,IAEI2a,EAAOjS,aACP6I,EAAG7I,WAAaZ,KAAKiJ,UAAUrI,WAAWiS,EAAOjS,aAGrD,CAAC,QAAQnJ,SAAQ,SAAC4N,GACK,MAAfwN,EAAOxN,KACXoE,EAAGpE,GAAOmB,QAAQC,QAAQoM,EAAOxN,IAAM8D,MAAK,SAACjR,GAAC,OAAMA,GAAI4H,EAAAA,EAAAA,IAAQ5H,GAAI,IAAI,IAC5E,IAAG,KAEI8H,KAAKiJ,UAAS,WAA0BsF,EAAAA,EAAAA,IAAkB9E,GAAG,kDAA9C7H,mBAAkB,iE,GAC3C,wBAEK,SAAWtE,G,6IACJ,O,SAAMA,EAAM,OAkBQ,OAlB7BA,EAAS,EAAH,KAEA9F,EAAc,CAAC,EAEC,MAAlB8F,EAAO6C,UACP3I,EAAO2I,QAAUH,KAAKwK,YAAYlN,EAAO6C,UAG7C,CAAC,YAAa,UAAU1I,SAAQ,SAAC4N,GACH,MAAhB/H,EAAQ+H,KAClB7N,EAAO6N,GAAa/H,EAAQ+H,GAChC,IAEA,CAAC,YAAa,WAAW5N,SAAQ,SAAC4N,GACJ,MAAhB/H,EAAQ+H,KAClB7N,EAAO6N,GAAO,EAAK6M,aAAmB5U,EAAQ+H,IAClD,IAAG,KAEIrF,KAAKiJ,UAAS,WAAcsF,EAAAA,EAAAA,IAAkB/W,GAAO,kDAAtC8F,OAAM,iE,GAC/B,mBAEK,SAAMqD,EAAiCL,EAAoBwS,G,kKAS9C,OARXA,GApkDe,IAqkDfxf,GAAOuW,WAAW,0CAA2CtW,EAAAA,GAAAA,OAAAA,aAA4B,CACrFwf,UAAWD,EAASnS,YAAAA,IAItBqS,EAAWrS,EAAYY,GAAE,SAEVvB,KAAKwO,QAAQ,OAAQ,CAAE7N,YAAAA,EAAaL,SAAAA,IAAW,OAAxD,GAAN9I,EAAS,EAAH,OAGRsb,GAAW,GAAkB,WAAbxS,GAAqC,MAAZ0S,GAAgD,eAA5Bxb,EAAOyM,UAAU,EAAG,MAAyBM,EAAAA,EAAAA,IAAc/M,GAAU,KAAO,GAAE,iBAmBvI,IAnBuI,SAEjI5E,GAAOwR,EAAAA,EAAAA,IAAa5M,EAAQ,GAG5BiW,GAASrJ,EAAAA,EAAAA,IAAaxR,EAAM,EAAG,IAChCiR,EAAAA,GAAAA,KAAe4J,GAAQrE,GAAG4J,IAC3B1f,GAAOuW,WAAW,iCAAkCtW,EAAAA,GAAAA,OAAAA,eAA8B,CAC9EkB,KAAM,iBACNwe,UAAW,sDACXtS,YAAAA,EAAa/N,KAAM4E,IAKrBgW,EAAsB,GACtB0F,EAAarP,EAAAA,GAAAA,MAAeO,EAAAA,EAAAA,IAAaxR,EAAM,GAAI,KAAKkR,WACxDqP,EAAatP,EAAAA,GAAAA,MAAeO,EAAAA,EAAAA,IAAaxR,EAAMsgB,EAAYA,EAAa,KAAKpP,WAC7EsP,GAAWhP,EAAAA,EAAAA,IAAaxR,EAAMsgB,EAAa,IACxCG,EAAI,EAAGA,EAAIF,EAAYE,IAEjB,OADLne,EAAM+S,GAAamL,EAAc,GAAJC,KAE/B/f,GAAOuW,WAAW,yCAA0CtW,EAAAA,GAAAA,OAAAA,eAA8B,CACtFkB,KAAM,iBACNwe,UAAW,sDACXtS,YAAAA,EAAa/N,KAAM4E,IAG3BgW,EAAKza,KAAKmC,GAmBK,OAfbqY,EAAWpF,GAAYvV,EAAM,IAG9BiR,EAAAA,GAAAA,MAAeO,EAAAA,EAAAA,IAAaxR,EAAM,IAAK,MAAMkS,UAC9CxR,GAAOuW,WAAW,4CAA6CtW,EAAAA,GAAAA,OAAAA,eAA8B,CACzFkB,KAAM,iBACNwe,UAAW,sDACXtS,YAAAA,EAAa/N,KAAM4E,IAGrB8b,GAAmBlP,EAAAA,EAAAA,IAAaxR,EAAM,GAAI,KAG1CoQ,EAAYmF,GAAYvV,EAAM,KAAI,UAEfoN,KAAKuT,cAA2B5S,EAAa4M,EAAUC,GAAK,QAYpF,OAXiB,OADZgG,EAAa,EAAH,OAEZlgB,GAAOuW,WAAW,yCAA0CtW,EAAAA,GAAAA,OAAAA,eAA8B,CACtFkB,KAAM,iBACNwe,UAAW,sDACXtS,YAAAA,EAAa/N,KAAM4E,IAIrBiS,EAAK,CACPlI,GAAIyR,EACJpgB,MAAMkW,EAAAA,EAAAA,IAAU,CAAEwK,EAAkB3K,GAAY,CAAE6K,EAAYxQ,OACjE,kBAEMhD,KAAKyT,MAAMhK,EAAInJ,EAAUwS,EAAU,IAAE,qCAGxC,KAAMxJ,OAAS/V,EAAAA,GAAAA,OAAAA,aAA0B,wEAK1CuM,EAAAA,EAAAA,IAAQtI,IAAO,4DAEflE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,OACRG,OAAQ,CAAExR,YAAAA,EAAaL,SAAAA,GAAY9I,OAAAA,EAAQxD,MAAK,QAClD,iE,GAGT,kBAEK,SAAK2M,EAA6CL,G,sIACpD,O,SAAMN,KAAKjJ,aAAY,OACN,OADM,UACAwX,EAAAA,EAAAA,IAAkB,CACrC5N,YAAaX,KAAK0T,uBAAuB/S,GACzCL,SAAUN,KAAKkS,aAAa5R,GAC5BoJ,gBAAiBlD,QAAQC,QAAQ9F,EAAY+I,mBAC/C,OAJY,OAARiK,EAAW,EAAH,uBAKP3T,KAAKyT,MAAME,EAAShT,YAAagT,EAASrT,SAAUqT,EAASjK,gBAAkB,GAAI,IAAE,+C,GAC/F,yBAEK,SAAY/I,G,wIACd,O,SAAMX,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CACnC5N,YAAaX,KAAK0T,uBAAuB/S,KAC3C,OAEa,OAJTwR,EAAS,EAAH,cAISnS,KAAKwO,QAAQ,cAAe2D,GAAO,OAA5C,OAAN3a,EAAS,EAAH,gCAEDqM,EAAAA,GAAAA,KAAerM,IAAO,2DAEtBlE,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC5Eye,OAAQ,cACRG,OAAAA,EAAQ3a,OAAAA,EAAQxD,MAAK,QACvB,yD,GAET,yBAEK,SAAYie,G,sIACE,O,SAAMA,EAAa,OAKnB,MAJc,kBAD9BA,EAAgB,EAAH,OAET3e,GAAO2D,mBAAmB,8BAA+B,OAAQgb,GACpE,SAEqBjS,KAAK4T,YAAY3B,GAAc,OAKpD,OAJc,OADT9R,EAAU,EAAH,OAET7M,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9E2W,UAAW,eAAF,OAAkBqB,KAAKC,UAAUyG,GAAe,OAEhE,kBACM9R,GAAO,+C,GACjB,uBAEK,SAAU0T,EAAqEC,G,+IACjF,O,SAAM9T,KAAKjJ,aAAY,OAED,OAFC,SAEK8c,EAAmB,OAO9C,GAPDA,EAAsB,EAAH,KAGf9S,GAAe,IAEboR,EAAiC,CACnC2B,sBAAuBA,KAGvB5P,EAAAA,EAAAA,IAAY2P,EAAqB,IAAK,CAAF,gBACpC1B,EAAOrR,UAAY+S,EAAoB,wBAGjB,OAHiB,oBAGX7T,KAAKkS,aAAa2B,GAAoB,QAA9D1B,EAAO7R,SAAW,EAAH,MACX4D,EAAAA,EAAAA,IAAYiO,EAAO7R,YACnBS,EAAciE,SAASmN,EAAO7R,SAAS2D,UAAU,GAAI,KACxD,mDAED3Q,GAAO2D,mBAAmB,kCAAmC,sBAAuB4c,GAAqB,kCAI1GxG,EAAAA,EAAAA,KAAK,kBAAW6D,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,6FACL,OADK,SACClR,KAAKwO,QAAQ,WAAY2D,GAAO,OAAzC,GAGE,OAHPxP,EAAQ,EAAH,MAGM,oBAKW,MAApBwP,EAAOrR,UAAiB,mBACsB,MAA1Cd,KAAKsM,SAAS,KAAO6F,EAAOrR,WAAkB,yCAAW,MAAI,UAI9C,MAAnBqR,EAAO7R,SAAgB,sBACnBS,EAAcf,KAAKsM,SAAS3J,OAAK,0CAAW,MAAI,sCAIjD3H,GAAS,YAIhB8Y,EAAqB,CAAF,gBACf/S,EAAsB,KACjBlO,EAAI,EAAC,aAAEA,EAAI8P,EAAMM,aAAanQ,QAAM,iBACT,GACV,OADhB2W,EAAK9G,EAAMM,aAAapQ,IACvBkO,YAAmB,iBACtB0I,EAAGxI,cAAgB,EAAE,2BAEM,MAApBwI,EAAGxI,cAAqB,oBACZ,MAAfF,EAAmB,iBACL,OADK,UACCf,KAAK6O,wBAAwB,IAAM,EAAI7O,KAAK8O,iBAAgB,QAAhF/N,EAAc,EAAH,cAIXE,EAAiBF,EAAc0I,EAAG1I,YAAe,IAChC,IAAKE,EAAgB,GAC1CwI,EAAGxI,cAAgBA,EAAc,QAbMpO,IAAG,wBAkBgE,OAD5GkhB,EAAoB/T,KAAKiJ,UAAU9F,sBAAsBR,IAClDM,aAAe8Q,EAAa9Q,aAAanJ,KAAI,SAAC2P,GAAuB,OAAK,EAAKmI,iBAAiBnI,EAAG,IAAE,kBAC3GsK,GAAY,iCAGhB/T,KAAKiJ,UAAUtG,MAAMA,IAAM,gDAErC,GAAE,CAAEqR,SAAUhU,QAAO,0D,GACzB,sBAED,SAAS6T,GACL,OAAwB7T,KAAKiU,UAAUJ,GAAqB,EAChE,GAAC,sCAED,SAAyBA,GACrB,OAAwC7T,KAAKiU,UAAUJ,GAAqB,EAChF,GAAC,4BAEK,SAAe/R,G,6IACjB,O,SAAM9B,KAAKjJ,aAAY,OACL,OADK,SACC+K,EAAe,OAEuC,OAF9EA,EAAkB,EAAH,KAETqQ,EAAS,CAAErQ,gBAAiB9B,KAAKiJ,UAAU1I,KAAKuB,GAAiB,IAAO,mBAEvEuL,EAAAA,EAAAA,KAAK,kBAAW6D,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,kFACJ,OADI,SACElR,KAAKwO,QAAQ,iBAAkB2D,GAAO,OAA/C,GAEE,OAFR3a,EAAS,EAAH,MAEM,mBAC+B,MAAzCwI,KAAKsM,SAAS,KAAOxK,GAAwB,yCACtC,MAAI,qCAER9G,GAAS,OAGiC,GAE/B,OAFhByO,EAAKzJ,KAAKiJ,UAAU5F,oBAAoB7L,IAEvCuJ,YAAmB,iBACtB0I,EAAGxI,cAAgB,EAAE,2BAEM,MAApBwI,EAAGxI,cAAqB,iBACX,OADW,UACLjB,KAAK6O,wBAAwB,IAAM,EAAI7O,KAAK8O,iBAAgB,QAAhF/N,EAAc,EAAH,MAGbE,EAAiBF,EAAc0I,EAAG1I,YAAe,IAChC,IAAKE,EAAgB,GAC1CwI,EAAGxI,cAAgBA,EAAc,iCAG9BjB,KAAK4R,iBAAiBnI,IAAG,gDACnC,GAAE,CAAEuK,SAAUhU,QAAO,+C,GACzB,mCAEK,SAAsB8B,G,6IACxB,O,SAAM9B,KAAKjJ,aAAY,OAEL,OAFK,SAEC+K,EAAe,OAEuC,OAF9EA,EAAkB,EAAH,KAETqQ,EAAS,CAAErQ,gBAAiB9B,KAAKiJ,UAAU1I,KAAKuB,GAAiB,IAAO,mBAEvEuL,EAAAA,EAAAA,KAAK,kBAAW6D,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,kFACJ,OADI,SACElR,KAAKwO,QAAQ,wBAAyB2D,GAAO,OAAtD,GAEE,OAFR3a,EAAS,EAAH,MAEM,mBAC+B,MAAzCwI,KAAKsM,SAAS,KAAOxK,GAAwB,yCACtC,MAAI,qCAER9G,GAAS,UAII,MAApBxD,EAAOsJ,UAAiB,8CAAW9F,GAAS,OAEF,GAEnB,OAFrBkH,EAAUlC,KAAKiJ,UAAU/G,QAAQ1K,IAE3BuJ,YAAmB,iBAC3BmB,EAAQjB,cAAgB,EAAE,2BAEM,MAAzBiB,EAAQjB,cAAqB,iBAChB,OADgB,UACVjB,KAAK6O,wBAAwB,IAAM,EAAI7O,KAAK8O,iBAAgB,QAAhF/N,EAAc,EAAH,MAGbE,EAAiBF,EAAcmB,EAAQnB,YAAe,IACrC,IAAKE,EAAgB,GAC1CiB,EAAQjB,cAAgBA,EAAc,iCAGnCiB,GAAO,gDACjB,GAAE,CAAE8R,SAAUhU,QAAO,+C,GACzB,qBAEK,SAAQ1C,G,wIACV,O,SAAM0C,KAAKjJ,aAAY,OACR,OADQ,UACFwX,EAAAA,EAAAA,IAAkB,CAAEjR,OAAQ0C,KAAKkU,WAAW5W,KAAU,OAClD,OADnB6U,EAAS,EAAH,cACmBnS,KAAKwO,QAAQ,UAAW2D,GAAO,OAG3D,OAHG5P,EAAI,QACL9K,SAAQ,SAAC8X,GACS,MAAfA,EAAI9L,UAAmB8L,EAAI9L,SAAU,EAC7C,IAAG,kBACI1D,GAAUiC,QAAQhC,KAAKiJ,UAAUzF,UAAUpD,KAAKJ,KAAKiJ,WAArDlJ,CAAiEwC,IAAK,gD,GAChF,2BAEK,W,gIACF,O,SAAMvC,KAAKjJ,aAAY,gCAChBiJ,KAAKwO,QAAQ,gBAAiB,CAAC,IAAG,+C,GAC5C,0BAEK,SAAalO,G,sIACJ,O,SAAMA,EAAQ,OAAjB,KAEiB,kBAFzBA,EAAW,EAAH,OAE6BA,EAAW,GAAC,iBAK3B,OAJdA,EAAW,GACXhN,GAAO2D,mBAAmB,mBAAoB,WAAYqJ,GAC7D,SAEuBN,KAAK6O,wBAAwB,IAAM,EAAI7O,KAAK8O,iBAAgB,OAE3C,OAFrC/N,EAAc,EAAH,MACfA,GAAeT,GACG,IAAKS,EAAc,GAAI,kBAClCf,KAAKiJ,UAAU3I,SAASS,IAAY,iCAGxCf,KAAKiJ,UAAU3I,SAASA,IAAS,gD,GAC3C,yBAGK,SAAY7L,G,0IACV0f,EAAc1f,EAAI,OACX,GACa,KAAhB0f,GAAsC,MAAhBA,EAAmB,yCAAW,MAAI,UAI/C,QAAT1f,GAAkC,QAAhB0f,EAAqB,yCAAW,MAAI,OAG7C,OAH6C,SAGvCnU,KAAKoU,aAAaD,EAAa,eAAc,OAAtD,GAGE,OAHNnJ,EAAO,EAAH,MAGM,iBAIY,GAHlBqJ,EAAW,IAAItL,GAAS/I,KAAMgL,EAAMvW,GAE1C,KACI0f,IAAgB1f,GAAI,sBAAM,OAAN,UAAY4f,EAASzK,mBAAkB,gFAAY,MAAI,iCAExEyK,GAAQ,QAInBF,EAAcA,EAAY1W,MAAM,KAAKnC,MAAM,GAAGyK,KAAK,KAAK,+D,GAG/D,0BAEK,SAAatR,EAAcyV,G,wIAGb,OAFC,MAAbA,IAAqBA,EAAY,OAAQ,SAEvBlK,KAAKjJ,aAAY,OAalB,OAbftD,EAAU,EAAH,MAGA6B,YACThC,GAAOuW,WACH,+BACAtW,EAAAA,GAAAA,OAAAA,sBACA,CAAE2W,UAAAA,EAAWzW,QAASA,EAAQgB,OAErC,kBAI0BuL,KAAKpI,KAAK,CAC7B2J,GAAI9N,EAAQ6B,WACZ1C,KAAO,aAAe+M,EAASlL,GAAMwP,UAAU,KACjD,OAHY,OAARqQ,EAAW,EAAH,uBAIPtU,KAAKiJ,UAAUqB,YAAYgK,IAAS,mEAKxC,MAAI,yD,GACd,yBAEK,SAAY7f,G,sIACP,O,SAAMA,EAAI,OAAb,OAAJA,EAAO,EAAH,gCAIO+R,QAAQC,QAAQzG,KAAKiJ,UAAU9I,QAAQ1L,KAAM,qCAGhDyP,EAAAA,EAAAA,IAAYzP,GAAO,CAAF,mCAQR,MALI,kBAAVA,GACPnB,GAAO2D,mBAAmB,mBAAoB,OAAQxC,GAG1D,UACuBuL,KAAKuU,YAAY9f,GAAK,QAA/B,GAAR4f,EAAW,EAAH,KACC,CAAF,yCAAW,MAAI,QAErB,OAFqB,UAEfA,EAASlQ,aAAY,iG,GACrC,2BAEK,SAAchE,G,0IACN,O,SAAMA,EAAO,OAKF,OALrBA,EAAU,EAAH,KACPA,EAAUH,KAAKiJ,UAAU9I,QAAQA,GAE3BzD,EAAOyD,EAAQ8D,UAAU,GAAGF,cAAgB,gBAAe,SAEtC/D,KAAKoU,aAAa1X,EAAM,iBAAgB,OAAjD,GACE,OADd8X,EAAe,EAAH,MACM,0CAAW,MAAI,QAGb,OAHa,KAG1BvM,GAAY,UAAOjI,KAAKpI,KAAK,CACtC2J,GAAIiT,EACJ5hB,KAAO,aAAe+M,EAASjD,GAAMuH,UAAU,KACjD,QAEW,OAFX,YAHIxP,GAAO,EAAH,WAGN,GAAC,UAEcuL,KAAK4T,YAAYnf,GAAK,QAA/B,GAAG,EAAH,MACE0L,EAAO,0CAAW,MAAI,iCAE3B1L,GAAI,gD,GACd,uBAEK,SAAUggB,G,kJACiB,GAAzBJ,EAAqB,OACrBnQ,EAAAA,EAAAA,IAAYuQ,GAAgB,CAAF,gBAMF,OAJlBtU,EAAUH,KAAKiJ,UAAU9I,QAAQsU,GAEjC/X,EAAOyD,EAAQ8D,UAAU,GAAGF,cAAgB,gBAAe,SAEnC/D,KAAKoU,aAAa1X,EAAM,aAAY,OAA7C,GAAfgY,EAAkB,EAAH,KACC,CAAF,wCAAW,MAAI,OAKhB,OAFnBL,EAAW,IAAItL,GAAS/I,KAAM0U,EAAiBhY,GAAM,oBAE5B2X,EAASM,YAAW,QAA7B,KAAN/J,EAAS,EAAH,MACA,CAAF,yCAAWA,EAAO1V,KAAG,8DAE3B,KAAMoU,OAAS/V,EAAAA,GAAAA,OAAAA,eAA4B,oCAMrB,OANqB,eAMlC0U,GAAY,UAAOjI,KAAKpI,KAAK,CACtC2J,GAAImT,EACJ9hB,KAAO,aAAe+M,EAASjD,GAAMuH,UAAU,KACjD,QACS,OADT,YAHIxP,GAAO,EAAH,WAGN,GAAC,UACYuL,KAAKuU,YAAY9f,GAAK,QAAvC4f,EAAW,EAAH,2DAEJ,KAAM/K,OAAS/V,EAAAA,GAAAA,OAAAA,eAA4B,6DACxC,MAAI,gCAKJ,OALI,UAKEyM,KAAKuU,YAAYE,GAAc,QAAxC,GAARJ,EAAW,EAAH,KACO,CAAF,yCAAW,MAAI,QAGjB,OAHiB,UAGXA,EAASM,YAAW,QAA7B,GACE,OADR/J,EAAS,EAAH,MACM,0CAAW,MAAI,iCAE1BA,EAAO1V,KAAG,kE,GACpB,qBAED,SAAQ8c,EAAgBG,GACpB,OAAO7e,GAAOuW,WAAWmI,EAAS,mBAAoBze,EAAAA,GAAAA,OAAAA,gBAA+B,CAAE2W,UAAW8H,GACtG,GAAC,yBAED,SAAY1E,GACRtN,KAAKyP,QAAWzP,KAAKqM,QAAQ/O,QAAO,SAACsX,GAAC,OAAKA,EAAEC,UAAU,IAAE/hB,OAAS,CACtE,GAAC,wBAED,SAAWwa,GACPtN,KAAKyP,QAAWzP,KAAKqM,QAAQ/O,QAAO,SAACsX,GAAC,OAAKA,EAAEC,UAAU,IAAE/hB,OAAS,CACtE,GAAC,+BAED,SAAkBmT,EAAsBa,EAAoBC,GACxD,IAAMuG,EAAQ,IAAI1G,GAAMZ,GAAYC,GAAYa,EAAUC,GAI1D,OAHA/G,KAAKqM,QAAQtZ,KAAKua,GAClBtN,KAAK8U,YAAYxH,GAEVtN,IACX,GAAC,gBAED,SAAGiG,EAAsBa,GACrB,OAAO9G,KAAK+U,kBAAkB9O,EAAWa,GAAU,EACvD,GAAC,kBAED,SAAKb,EAAsBa,GACvB,OAAO9G,KAAK+U,kBAAkB9O,EAAWa,GAAU,EACvD,GAAC,kBAGD,SAAKb,GAAyC,kCAAhB+O,EAAgB,iCAAhBA,EAAgB,kBAC1C,IAAIxd,GAAS,EAETyd,EAAwB,GAExBC,EAAWlP,GAAYC,GAoB3B,OAnBAjG,KAAKqM,QAAUrM,KAAKqM,QAAQ/O,QAAO,SAACgQ,GAChC,OAAIA,EAAMzG,MAAQqO,IAElBxO,YAAW,WACP4G,EAAMxG,SAASqO,MAAM,EAAMH,EAC/B,GAAG,GAEHxd,GAAS,GAEL8V,EAAMvG,OACNkO,EAAQliB,KAAKua,IACN,GAIf,IAEA2H,EAAQxd,SAAQ,SAAC6V,GAAY,EAAK8H,WAAW9H,EAAQ,IAE9C9V,CACX,GAAC,2BAED,SAAcyO,GACV,IAAKA,EAAa,OAAOjG,KAAKqM,QAAQvZ,OAEtC,IAAIoiB,EAAWlP,GAAYC,GAC3B,OAAOjG,KAAKqM,QAAQ/O,QAAO,SAACgQ,GACxB,OAAQA,EAAMzG,MAAQqO,CAC1B,IAAGpiB,MACP,GAAC,uBAED,SAAUmT,GACN,GAAiB,MAAbA,EACA,OAAOjG,KAAKqM,QAAQvS,KAAI,SAACwT,GAAK,OAAKA,EAAMxG,QAAQ,IAGrD,IAAIoO,EAAWlP,GAAYC,GAC3B,OAAOjG,KAAKqM,QACP/O,QAAO,SAACgQ,GAAK,OAAMA,EAAMzG,MAAQqO,CAAQ,IACzCpb,KAAI,SAACwT,GAAK,OAAKA,EAAMxG,QAAQ,GACtC,GAAC,iBAED,SAAIb,EAAsBa,GAAmB,WACzC,GAAgB,MAAZA,EACA,OAAO9G,KAAKqV,mBAAmBpP,GAGnC,IAAMgP,EAAwB,GAE1BK,GAAQ,EAERJ,EAAWlP,GAAYC,GAW3B,OAVAjG,KAAKqM,QAAUrM,KAAKqM,QAAQ/O,QAAO,SAACgQ,GAChC,OAAIA,EAAMzG,MAAQqO,GAAY5H,EAAMxG,UAAYA,MAC5CwO,IACJA,GAAQ,EACRL,EAAQliB,KAAKua,IACN,GACX,IAEA2H,EAAQxd,SAAQ,SAAC6V,GAAY,EAAK8H,WAAW9H,EAAQ,IAE9CtN,IACX,GAAC,gCAED,SAAmBiG,GAAqB,WAChCgP,EAAwB,GAC5B,GAAiB,MAAbhP,EACAgP,EAAUjV,KAAKqM,QAEfrM,KAAKqM,QAAU,OACZ,CACH,IAAM6I,EAAWlP,GAAYC,GAC7BjG,KAAKqM,QAAUrM,KAAKqM,QAAQ/O,QAAO,SAACgQ,GAChC,OAAIA,EAAMzG,MAAQqO,IAClBD,EAAQliB,KAAKua,IACN,EACX,G,CAKJ,OAFA2H,EAAQxd,SAAQ,SAAC6V,GAAY,EAAK8H,WAAW9H,EAAQ,IAE9CtN,IACX,IAAC,2BAr1CD,WAII,OAHwB,MAApBkM,KACAA,GAAmB,IAAInM,IAEpBmM,EACX,GAEA,wBACA,SAAkBzY,GACd,OAAOsD,EAAAA,EAAAA,GAAuB,MAAXtD,EAAmB,YAAaA,EACvD,KAAC,EA/JqB,CAAQ8hB,EAAAA,I,uSE5qB5BjiB,GAAS,IAAIC,EAAAA,GAAO6D,EAAAA,GAKpBoe,GAAW,CAAE,OAAQ,eAE3B,SAASC,GAAQve,EAAYwe,GACzB,GAAa,MAATxe,EAAiB,OAAO,KAG5B,GAA8B,kBAAnBA,EAAM6G,SAAyB7G,EAAM6G,QAAQuK,MAAM,YAAa,CACvE,IAAM1V,GAAOsR,EAAAA,EAAAA,IAAYhN,EAAMtE,MAAQsE,EAAMtE,KAAM,KACnD,IAAK8iB,GAAe9iB,EAChB,MAAO,CAAEmL,QAAS7G,EAAM6G,QAASnL,KAAAA,E,CAKzC,GAAsB,kBAAXsE,EAAqB,CAC5B,IAAK,IAAMmO,KAAOnO,EAAO,CACrB,IAAMM,EAASie,GAAQve,EAAMmO,GAAMqQ,GACnC,GAAIle,EAAU,OAAOA,C,CAEzB,OAAO,I,CAIX,GAAsB,kBAAXN,EACP,IACI,OAAOue,GAAQlK,KAAKoK,MAAMze,GAAQwe,EACrB,CAAf,MAAO1hB,GAAQ,CAGrB,OAAO,IACX,CAEA,SAAS4hB,GAAW5D,EAAgBhe,EAAYme,GAE5C,IAAMxR,EAAcwR,EAAOxR,aAAewR,EAAOO,kBAIjD,GAAe,SAAXV,EAAmB,CACnB,IAAMxa,EAASie,GAAQzhB,GAAO,GAC9B,GAAIwD,EAAU,OAAOA,EAAO5E,KAG5BU,GAAOuW,WAAW,sFAAuFtW,EAAAA,GAAAA,OAAAA,eAA8B,CACnIX,KAAM,KAAM+N,YAAAA,EAAa3M,MAAAA,G,CAIjC,GAAe,gBAAXge,EAA0B,CAE1B,IAAIxa,EAASie,GAAQzhB,EAAM6hB,MAAM,GACnB,MAAVre,IAAkBA,EAASie,GAAQzhB,GAAO,IAG1CwD,GACAlE,GAAOuW,WAAW,4EAA6EtW,EAAAA,GAAAA,OAAAA,wBAAuC,CAClIke,OAAQja,EAAOuG,QAASiU,OAAAA,EAAQrR,YAAAA,EAAa3M,MAAAA,G,CAOzD,IAAI+J,EAAU/J,EAAM+J,QA4CpB,MA3CI/J,EAAMsV,OAAS/V,EAAAA,GAAAA,OAAAA,cAA8BS,EAAMA,OAAyC,kBAAzBA,EAAMA,MAAM+J,QAC/EA,EAAU/J,EAAMA,MAAM+J,QACQ,kBAAhB/J,EAAM6hB,KACpB9X,EAAU/J,EAAM6hB,KACsB,kBAAxB7hB,EAAM8hB,eACpB/X,EAAU/J,EAAM8hB,eAEpB/X,GAAWA,GAAW,IAAIgG,eAGduE,MAAM,qEACdhV,GAAOuW,WAAW,oDAAqDtW,EAAAA,GAAAA,OAAAA,mBAAkC,CACrGS,MAAAA,EAAOge,OAAAA,EAAQrR,YAAAA,IAKnB5C,EAAQuK,MAAM,yBACdhV,GAAOuW,WAAW,8BAA+BtW,EAAAA,GAAAA,OAAAA,cAA6B,CAC1ES,MAAAA,EAAOge,OAAAA,EAAQrR,YAAAA,IAKnB5C,EAAQuK,MAAM,wEACdhV,GAAOuW,WAAW,0BAA2BtW,EAAAA,GAAAA,OAAAA,wBAAuC,CAChFS,MAAAA,EAAOge,OAAAA,EAAQrR,YAAAA,IAKnB5C,EAAQuK,MAAM,2BACdhV,GAAOuW,WAAW,gDAAiDtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACpGS,MAAAA,EAAOge,OAAAA,EAAQrR,YAAAA,IAInB6U,GAAShhB,QAAQwd,IAAW,GAAKjU,EAAQuK,MAAM,wFAC/ChV,GAAOuW,WAAW,4EAA6EtW,EAAAA,GAAAA,OAAAA,wBAAuC,CAClIS,MAAAA,EAAOge,OAAAA,EAAQrR,YAAAA,IAIjB3M,CACV,CAEA,SAAS6d,GAAMzB,GACX,OAAO,IAAI5J,SAAQ,SAASC,GACxBC,WAAWD,EAAS2J,EACxB,GACJ,CAEA,SAAS2F,GAAUC,GACf,GAAIA,EAAQhiB,MAAO,CAEf,IAAMA,EAAa,IAAI4J,MAAMoY,EAAQhiB,MAAM+J,SAG3C,MAFA/J,EAAMsV,KAAO0M,EAAQhiB,MAAMsV,KAC3BtV,EAAMpB,KAAOojB,EAAQhiB,MAAMpB,KACrBoB,C,CAGV,OAAOgiB,EAAQxe,MACnB,CAEA,SAASye,GAAa/e,GAClB,OAAIA,EAAgBA,EAAM6M,cACnB7M,CACX,CAEA,IAAMgf,GAAoB,CAAC,EAEdC,GAAc,0CAKvB,WAAYC,EAAuB7hB,EAA2B8hB,GAAgC,MAG1F,IAH0F,eAC1F,eAEID,IAAqBF,GACrB,MAAM,IAAItY,MAAM,8EAiBnB,OAdDoJ,EAAAA,EAAAA,KAAe,UAAM,WAAYzS,GAEX,MAAlB8hB,IAA0BA,EAAiB,GAEhB,kBAApBA,IACPrP,EAAAA,EAAAA,KAAe,UAAM,WAAY,EAAKzS,SAAS0U,UAAU9I,QAAQkW,KACjErP,EAAAA,EAAAA,KAAe,UAAM,SAAU,OAEG,kBAApBqP,IACdrP,EAAAA,EAAAA,KAAe,UAAM,SAAUqP,IAC/BrP,EAAAA,EAAAA,KAAe,UAAM,WAAY,OAGjC1T,GAAO2D,mBAAmB,2BAA4B,iBAAkBof,GAC3E,CACL,CAoLC,OApLA,+BAED,SAAQ9hB,GACJ,OAAOjB,GAAOuW,WAAW,0CAA2CtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACrG2W,UAAW,WAEnB,GAAC,8BAED,WACI,OAAO,IAAIoM,GAAuBJ,GAAmBlW,KAAKzL,SAAUyL,KAAKuW,UAAYvW,KAAKwW,OAC9F,GAAC,wBAED,WAAU,WACN,OAAIxW,KAAKuW,SACE/P,QAAQC,QAAQzG,KAAKuW,UAGzBvW,KAAKzL,SAASkiB,KAAK,eAAgB,IAAItN,MAAK,SAACuN,GAMhD,OALIA,EAAS5jB,QAAU,EAAK0jB,QACxBljB,GAAOuW,WAAW,oBAAsB,EAAK2M,OAAQjjB,EAAAA,GAAAA,OAAAA,sBAAqC,CACtF2W,UAAW,eAGZ,EAAK3V,SAAS0U,UAAU9I,QAAQuW,EAAS,EAAKF,QACzD,GACJ,GAAC,sCAED,SAAyB7V,GAA2C,WAChEA,GAAcyC,EAAAA,EAAAA,IAAYzC,GAE1B,IAAMgW,EAAc3W,KAAKmE,aAAagF,MAAK,SAAChJ,GAExC,OADIA,IAAWA,EAAUA,EAAQ4D,eAC1B5D,CACX,IAKA,GAA4B,MAAxBQ,EAAYW,SAAkB,CAC9B,IAAMsV,GAAWxT,EAAAA,EAAAA,IAAYzC,GAC7BiW,EAAS1V,KAAOyV,EAChBhW,EAAYW,SAAWtB,KAAKzL,SAASsiB,YAAYD,E,CAcrD,OAXsB,MAAlBjW,EAAYY,KACZZ,EAAYY,GAAKiF,QAAQC,QAAQ9F,EAAYY,IAAI4H,MAAK,SAAO5H,GAAE,OAAI2P,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,+EACrD,MAAN3P,EAAU,yCAAW,MAAI,OACb,OADa,SACPvB,KAAKzL,SAASqf,YAAYrS,GAAG,OAGlD,OAFc,OADTpB,EAAU,EAAH,OAET7M,GAAO2D,mBAAmB,qCAAsC,QAASsK,GAC5E,kBACMpB,GAAO,+CACjB,MAGEoO,EAAAA,EAAAA,IAAkB,CACrB9E,IAAI8E,EAAAA,EAAAA,IAAkB5N,GACtB8M,OAAQkJ,IACTxN,MAAK,YAAmB,IAAhBM,EAAE,EAAFA,GAAIgE,EAAM,EAANA,OAEI,MAAXhE,EAAGvI,KACCuI,EAAGvI,KAAK6C,gBAAkB0J,GAC1Bna,GAAO2D,mBAAmB,wBAAyB,cAAe0J,GAGtE8I,EAAGvI,KAAOuM,EAGd,IAAMmF,EAAc,EAAKre,SAASuiB,YAAaC,mBAAmBtN,EAAI,CAAEvI,MAAM,IAE9E,OAAO,EAAK3M,SAASkiB,KAAK,sBAAuB,CAAE7D,IAASzJ,MAAK,SAAC5I,GAC9D,OAAOA,CACX,IAAG,SAACvM,GAQA,MAP8B,kBAAnBA,EAAM+J,SAAyB/J,EAAM+J,QAAQuK,MAAM,iBAC1DhV,GAAOuW,WAAW,4BAA6BtW,EAAAA,GAAAA,OAAAA,gBAA+B,CAC1EyjB,OAAQ,kBACRrW,YAAa8I,IAIdmM,GAAW,kBAAmB5hB,EAAO4e,EAChD,GACJ,GACJ,GAAC,6BAED,SAAgBjS,GACZ,OAAOrN,GAAOuW,WAAW,sCAAuCtW,EAAAA,GAAAA,OAAAA,sBAAqC,CACjG2W,UAAW,mBAEnB,GAAC,6BAEK,SAAgBvJ,G,+IAEE,O,SAAMX,KAAKzL,SAASsa,wBAAwB,IAAM,EAAI7O,KAAKzL,SAASua,iBAAgB,OAG3F,OAHP/N,EAAc,EAAH,cAGEf,KAAKiX,yBAAyBtW,GAAY,OAMlD,OANLJ,EAAO,EAAH,wBAMO8M,EAAAA,EAAAA,KAAK,kBAAW6D,GAAAA,OAAAA,OAAAA,GAAAA,EAAAA,EAAAA,KAAAA,MAAAA,SAAAA,IAAA,4EACd,OADc,SACRlR,KAAKzL,SAAS6c,eAAe7Q,GAAK,OAA3C,GACG,QADLkJ,EAAK,EAAH,MACO,8CAAWzO,GAAS,gCAC5BgF,KAAKzL,SAASqd,iBAAiBnI,EAAIlJ,EAAMQ,IAAY,+CAC/D,GAAE,CAAEiT,SAAUhU,KAAKzL,WAAW,gDAEK,MAFL,0BAEzB,KAAOuN,gBAAkBvB,EAAK,8D,GAG3C,yBAEK,SAAYxC,G,wIAEE,OADVnL,EAA6B,kBAAbmL,GAAyByB,EAAAA,EAAAA,IAAYzB,GAAUA,EAAO,SACtDiC,KAAKmE,aAAY,OAE5B,OAFLhE,EAAU,EAAH,uBAEIH,KAAKzL,SAASkiB,KAAK,gBAAiB,EAAE3W,EAAAA,EAAAA,IAAQlN,GAAOuN,EAAQ4D,gBAAgB,gDAQzF,MARyF,0BAE5D,kBAAnB,KAAMhG,SAAyB,KAAMA,QAAQuK,MAAM,iBAC1DhV,GAAOuW,WAAW,wBAAyBtW,EAAAA,GAAAA,OAAAA,gBAA+B,CACtEyjB,OAAQ,cACR9V,KAAMf,EACN+W,YAAanZ,IAEpB,8D,GAGR,gCAEK,SAAmBA,G,wIAEL,OADVnL,EAA6B,kBAAbmL,GAAyByB,EAAAA,EAAAA,IAAYzB,GAAUA,EAAO,SACtDiC,KAAKmE,aAAY,OAI5B,OAJLhE,EAAU,EAAH,uBAIIH,KAAKzL,SAASkiB,KAAK,WAAY,CAAEtW,EAAQ4D,eAAejE,EAAAA,EAAAA,IAAQlN,KAAQ,gDAQpF,MARoF,0BAEvD,kBAAnB,KAAMmL,SAAyB,KAAMA,QAAQuK,MAAM,iBAC1DhV,GAAOuW,WAAW,wBAAyBtW,EAAAA,GAAAA,OAAAA,gBAA+B,CACtEyjB,OAAQ,qBACR9V,KAAMf,EACN+W,YAAanZ,IAEpB,8D,GAGR,4BAEK,SAAeoZ,EAAyBC,EAA8ClgB,G,+IAEtE,O,SAAMmgB,EAAAA,EAAAA,aAA+BF,EAAQC,EAAOlgB,GAAO,SAACzC,GAC1E,OAAO,EAAKF,SAASqf,YAAYnf,EACrC,IAAE,OAEc,OAJV6iB,EAAY,EAAH,cAIOtX,KAAKmE,aAAY,OAG5B,OAHLhE,EAAU,EAAH,uBAGIH,KAAKzL,SAASkiB,KAAK,uBAAwB,CACpDtW,EAAQ4D,cACRwH,KAAKC,UAAU6L,EAAAA,EAAAA,WAA6BC,EAAUH,OAAQC,EAAOE,EAAUpgB,UACjF,gDAQD,MARC,0BAE4B,kBAAnB,KAAM6G,SAAyB,KAAMA,QAAQuK,MAAM,iBAC1DhV,GAAOuW,WAAW,wBAAyBtW,EAAAA,GAAAA,OAAAA,gBAA+B,CACtEyjB,OAAQ,iBACR9V,KAAMf,EACN+W,YAAa,CAAEC,OAAQG,EAAUH,OAAQC,MAAAA,EAAOlgB,MAAOogB,EAAUpgB,SAExE,8D,GAGR,oBAEK,SAAOqgB,G,wIAGO,OAFVhjB,EAAWyL,KAAKzL,SAAQ,SAERyL,KAAKmE,aAAY,OAA1B,OAAPhE,EAAU,EAAH,uBAEN5L,EAASkiB,KAAK,yBAA0B,CAAEtW,EAAQ4D,cAAewT,EAAU,QAAO,+C,KAC5F,EA/MsB,CAAQC,EAAAA,GAkN7BlB,GAAuB,qGAgBxB,OAhBwB,uCACzB,SAAgB3V,GAA2C,WACvD,OAAOX,KAAKiX,yBAAyBtW,GAAawI,MAAK,SAAC5I,GACpD,MAA4B,CACxBA,KAAMA,EACNiB,MAAO,KACPF,SAAU,KACVH,SAAU,KACVvO,KAAM,KACNsE,MAAO,KACP7B,QAAS,KACT4L,cAAe,EACfC,KAAM,KACNsR,KAAM,SAACvR,GAA6B,OAAO,EAAK1M,SAASid,mBAAmBjR,EAAMU,EAAgB,EAE1G,GACJ,KAAC,EAhBwB,CAAQkV,IAmB/BsB,GAAuD,CACzDpiB,SAAS,EAAMzC,MAAM,EAAM0O,UAAU,EAAMH,UAAS,EAAMK,OAAO,EAAMD,IAAI,EAAMrK,OAAO,EACxFwJ,MAAM,EAAME,YAAY,EACxBS,cAAc,EAAMD,sBAAsB,GAGjCjM,GAAgB,0CAiBzB,WAAYD,EAA+BzB,GAAoB,sBAC3D,IAAIikB,EAAgDjkB,EA4BlC,OAzBI,MAAlBikB,IACAA,EAAiB,IAAIlR,SAAQ,SAACC,EAAS8J,GACnC7J,YAAW,WACP,EAAKgG,gBAAgBvD,MAAK,SAAC1V,GACvBgT,EAAQhT,EACZ,IAAG,SAACO,GACAuc,EAAOvc,EACX,GACJ,GAAG,EACP,KAGJ,cAAM0jB,GAGDxiB,IAAOA,GAAM4X,EAAAA,EAAAA,IAAwB,EAAKgK,YAAa,aAA1ChK,IAEE,kBAAT5X,GACP8R,EAAAA,EAAAA,KAAe,UAAM,aAAalB,OAAO6R,OAAO,CAC5CziB,IAAKA,MAGT8R,EAAAA,EAAAA,KAAe,UAAM,aAAclB,OAAO6R,QAAOvU,EAAAA,EAAAA,IAAYlO,KAGjE,EAAK0iB,QAAU,GAAG,CACtB,CA6SC,OA7SA,4BArCD,WAII,OAH4B,MAAxB5X,KAAK6X,kBACL7X,KAAK6X,gBAAkB,CAAC,GAErB7X,KAAK6X,eAChB,GAAC,2BAsCD,WAAa,WAST,OARK7X,KAAK8X,OAAsB,gBAC5B9X,KAAK8X,OAAsB,cAAI9X,KAAK+X,yBAGpCrR,YAAW,WACP,EAAKoR,OAAsB,cAAI,IACnC,GAAG,IAEA9X,KAAK8X,OAAsB,aACtC,GAAC,oCAEK,W,wIACF,O,SAAMjG,GAAM,GAAE,OAIA,OAFVxc,EAAU,KAAI,kBAEE2K,KAAKyW,KAAK,cAAe,IAAI,OAA7CphB,EAAU,EAAH,4BAGO,OAHP,6CAGa2K,KAAKyW,KAAK,cAAe,IAAI,QAA7CphB,EAAU,EAAH,mEAIA,MAAXA,EAAe,iBAC+E,OAAxF0B,GAAa+V,EAAAA,EAAAA,IAA4C9M,KAAK8W,YAAa,cAAa,4BAEnF/f,EAAW8M,EAAAA,GAAAA,KAAexO,GAASyO,aAAW,4DAE9CxQ,GAAOuW,WAAW,2BAA4BtW,EAAAA,GAAAA,OAAAA,cAA6B,CAC9E8B,QAASA,EACTiY,MAAO,iBACP0K,YAAa,EAAF,MACb,iCAIH1kB,GAAOuW,WAAW,2BAA4BtW,EAAAA,GAAAA,OAAAA,cAA6B,CAC9E+Z,MAAO,eACT,wE,GACL,uBAED,SAAU+I,GACN,OAAO,IAAIF,GAAcD,GAAmBlW,KAAMqW,EACtD,GAAC,gCAED,SAAmBA,GACf,OAAOrW,KAAKiY,UAAU5B,GAAgB6B,kBAC1C,GAAC,0BAED,WAAY,WACR,OAAOlY,KAAKyW,KAAK,eAAgB,IAAItN,MAAK,SAACuN,GACvC,OAAOA,EAAS5c,KAAI,SAACH,GAAC,OAAK,EAAKsP,UAAU9I,QAAQxG,EAAE,GACxD,GACJ,GAAC,kBAED,SAAKqY,EAAgBG,GAAkB,WAC7BgG,EAAU,CACZnG,OAAQA,EACRG,OAAQA,EACRiG,GAAKpY,KAAK4X,UACVS,QAAS,OAGbrY,KAAK+M,KAAK,QAAS,CACfiK,OAAQ,UACRmB,SAASG,EAAAA,EAAAA,IAASH,GAClB5jB,SAAUyL,OAKd,IAAMuY,EAAS,CAAE,cAAe,mBAAoB/jB,QAAQwd,IAAW,EACvE,GAAIuG,GAASvY,KAAK8X,OAAO9F,GACrB,OAAOhS,KAAK8X,OAAO9F,GAGvB,IAAMxa,GAAS6T,EAAAA,EAAAA,IAAUrL,KAAKwY,WAAYjN,KAAKC,UAAU2M,GAAUpC,IAAW5M,MAAK,SAAC3R,GAQhF,OAPA,EAAKuV,KAAK,QAAS,CACfiK,OAAQ,WACRmB,QAASA,EACTrK,SAAUtW,EACVjD,SAAU,IAGPiD,CAEX,IAAG,SAACxD,GAQA,MAPA,EAAK+Y,KAAK,QAAS,CACfiK,OAAQ,WACRhjB,MAAOA,EACPmkB,QAASA,EACT5jB,SAAU,IAGRP,CACV,IAUA,OAPIukB,IACAvY,KAAK8X,OAAO9F,GAAUxa,EACtBkP,YAAW,WACP,EAAKoR,OAAO9F,GAAU,IAC1B,GAAG,IAGAxa,CACX,GAAC,4BAED,SAAewa,EAAgBG,GAC3B,OAAQH,GACJ,IAAK,iBACD,MAAO,CAAE,kBAAmB,IAEhC,IAAK,cACD,MAAO,CAAE,eAAgB,IAE7B,IAAK,aACD,MAAO,CAAE,iBAAkB,CAAEiE,GAAa9D,EAAOhS,SAAUgS,EAAO7R,WAEtE,IAAK,sBACD,MAAO,CAAE,0BAA2B,CAAE2V,GAAa9D,EAAOhS,SAAUgS,EAAO7R,WAE/E,IAAK,UACD,MAAO,CAAE,cAAe,CAAE2V,GAAa9D,EAAOhS,SAAUgS,EAAO7R,WAEnE,IAAK,eACD,MAAO,CAAE,mBAAoB,CAAE2V,GAAa9D,EAAOhS,UAAUqE,EAAAA,EAAAA,IAAW2N,EAAOC,SAAU,IAAKD,EAAO7R,WAEzG,IAAK,kBACD,MAAO,CAAE,yBAA0B,CAAE6R,EAAOO,oBAEhD,IAAK,WACD,OAAIP,EAAO7R,SACA,CAAE,uBAAwB,CAAE6R,EAAO7R,WAAY6R,EAAO2B,sBACtD3B,EAAOrR,UACP,CAAE,qBAAsB,CAAEqR,EAAOrR,YAAaqR,EAAO2B,sBAEzD,KAEX,IAAK,iBACD,MAAO,CAAE,2BAA4B,CAAE3B,EAAOrQ,kBAElD,IAAK,wBACD,MAAO,CAAE,4BAA6B,CAAEqQ,EAAOrQ,kBAEnD,IAAK,OAED,MAAO,CAAE,WAAY,EADMgL,EAAAA,EAAAA,IAAgG9M,KAAK8W,YAAa,qBACtHC,CAAmB5E,EAAOxR,YAAa,CAAEO,MAAM,IAASiR,EAAO7R,WAG1F,IAAK,cAED,MAAO,CAAE,kBAAmB,EADDwM,EAAAA,EAAAA,IAAgG9M,KAAK8W,YAAa,qBAC/GC,CAAmB5E,EAAOxR,YAAa,CAAEO,MAAM,MAGjF,IAAK,UAID,OAHIiR,EAAO7U,QAAmC,MAAzB6U,EAAO7U,OAAO6C,UAC/BgS,EAAO7U,OAAO6C,QAAU8V,GAAa9D,EAAO7U,OAAO6C,UAEhD,CAAE,cAAe,CAAEgS,EAAO7U,SAMzC,OAAO,IACX,GAAC,qBAEK,SAAQ0U,EAAgBG,G,6IAGX,SAAXH,GAAgC,gBAAXA,EAAwB,gBAChB,KAAvBvI,EAAK0I,EAAOxR,cACG,MAAX8I,EAAG/I,OAAgBmD,EAAAA,GAAAA,KAAe4F,EAAG/I,MAAMoE,SAAQ,mBAElC,MAAnB2E,EAAGpI,cAAmD,MAA3BoI,EAAGrI,qBAA4B,gBAC1C,OAD0C,SACpCpB,KAAKyY,aAAY,OACX,OADtBC,EAAU,EAAH,MACDrX,cAAwD,MAAhCqX,EAAQtX,wBAExC+Q,GAAS/O,EAAAA,EAAAA,IAAY+O,IACdxR,aAAcyC,EAAAA,EAAAA,IAAYqG,UAC1B0I,EAAOxR,YAAYD,MAC7B,OAWF,OAJC,OAFNsU,EAAOhV,KAAK2Y,eAAe3G,EAASG,KAGtC7e,GAAOuW,WAAWmI,EAAS,mBAAoBze,EAAAA,GAAAA,OAAAA,gBAA+B,CAAE2W,UAAW8H,IAC9F,oBAEgBhS,KAAKyW,KAAKzB,EAAK,GAAIA,EAAK,IAAG,qGAEjCY,GAAW5D,EAAQ,EAAF,GAASG,IAAO,0D,GAE/C,yBAED,SAAY7E,GACU,YAAdA,EAAMzG,KAAqB7G,KAAK4Y,iBACpC,0DAAkBtL,EACtB,GAAC,2BAED,WACI,GAA2B,MAAvBtN,KAAK6Y,eAAT,CACA,IAAMC,EAAO9Y,KAEP+Y,EAAiC/Y,KAAKyW,KAAK,kCAAmC,IACpFzW,KAAK6Y,eAAiBE,EAEtBA,EAAc5P,MAAK,SAAS6P,GAgCxB,OA/BA,SAAS3L,IACLyL,EAAKrC,KAAK,uBAAwB,CAAEuC,IAAY7P,MAAK,SAAS8P,GAC1D,GAAIH,EAAKD,gBAAkBE,EAAiB,OAAO,KAEnD,IAAIG,EAAM1S,QAAQC,UAYlB,OAXAwS,EAAOxhB,SAAQ,SAAS8I,GAEpBuY,EAAKxM,SAAS,KAAO/L,EAAKwD,eAAiB,UAC3CmV,EAAMA,EAAI/P,MAAK,WACX,OAAO2P,EAAK1H,eAAe7Q,GAAM4I,MAAK,SAASM,GAE3C,OADAqP,EAAK/L,KAAK,UAAWtD,GACd,IACX,GACJ,GACJ,IAEOyP,EAAI/P,MAAK,WACZ,OAAO0I,GAAM,IACjB,GACJ,IAAG1I,MAAK,WACJ,GAAI2P,EAAKD,gBAAkBE,EAM3B,OAFArS,YAAW,WAAa2G,GAAQ,GAAG,GAE5B,KALHyL,EAAKrC,KAAK,sBAAuB,CAAEuC,GAM3C,IAAG3P,OAAM,SAACrV,GAAmB,GACjC,CACAqZ,GAEO2L,CACX,IAAG3P,OAAM,SAACrV,GAAmB,G,CACjC,GAAC,wBAED,SAAWsZ,GACW,YAAdA,EAAMzG,KAAuD,IAAlC7G,KAAKmZ,cAAc,aAC9CnZ,KAAK6Y,eAAiB,OAE1B,yDAAiBvL,EACrB,IAUA,yBA3QA,WACI,MAAO,uBACX,GAAC,gCA0QD,SAA0B3M,EAAiCyY,GAEvD,IAAMC,GAAUjW,EAAAA,EAAAA,IAAYqU,IAC5B,GAAI2B,EACA,IAAK,IAAM/T,KAAO+T,EACVA,EAAW/T,KAAQgU,EAAQhU,IAAO,IAI9CiU,EAAAA,EAAAA,IAAgB3Y,EAAa0Y,GAE7B,IAAM7hB,EAAiD,CAAC,EAmBxD,MAhBA,CAAC,UAAW,WAAY,WAAY,OAAQ,eAAgB,uBAAwB,QAAS,SAASC,SAAQ,SAAS4N,GACnH,GAA+B,MAArB1E,EAAa0E,GAAvB,CACA,IAAMnO,GAAQoN,EAAAA,EAAAA,IAAST,EAAAA,GAAAA,KAAqBlD,EAAa0E,KAC7C,aAARA,IAAsBA,EAAM,OAChC7N,EAAO6N,GAAOnO,C,CAClB,IAEA,CAAC,OAAQ,KAAM,QAAQO,SAAQ,SAAS4N,GACL,MAArB1E,EAAa0E,KACvB7N,EAAO6N,IAAOvF,EAAAA,EAAAA,IAAca,EAAa0E,IAC7C,IAEU1E,EAAaC,aACnBpJ,EAAmB,YAAIoM,EAAAA,EAAAA,IAAoBjD,EAAaC,aAGrDpJ,CACX,KAAC,EA5VwB,CAAQ4U,G,qbChY/B,SAAgBmN,EAAO5L,EAAc/Z,G,6IA0BtB,OAzBF,MAAXA,IAAmBA,EAAU,CAAC,GAE5BukB,EAAuB,CACzBnG,OAASpe,EAAQoe,QAAU,MAC3BwH,QAAU5lB,EAAQ4lB,SAAW,CAAC,EAC9B3D,KAAOjiB,EAAQiiB,WAAQ7a,IAGI,IAA3BpH,EAAQ6lB,iBACRtB,EAAQuB,KAAoB,OAC5BvB,EAAQI,MAAsB,WAC9BJ,EAAQwB,YAAkC,cAC1CxB,EAAQyB,SAA4B,SACpCzB,EAAQ0B,SAAW,UAGK,MAAxBjmB,EAAQkmB,gBACFC,EAAOnmB,EAAQkmB,cACZJ,OAAQvB,EAAQuB,KAAqBK,EAAKL,MAC/CK,EAAKxB,QAASJ,EAAQI,MAAuBwB,EAAKxB,OAClDwB,EAAKJ,cAAexB,EAAQwB,YAAmCI,EAAKJ,aACpEI,EAAKH,WAAYzB,EAAQyB,SAA6BG,EAAKH,UAC3DG,EAAKF,WAAY1B,EAAQ0B,SAAWE,EAAKF,WAChD,SAEsBG,MAAMrM,EAAMwK,GAAQ,OAC9B,OADPrK,EAAW,EAAH,eACKA,EAASmM,cAAa,QAWxC,OAXKpE,EAAO,EAAH,KAEJ2D,EAAwC,CAAC,EAC3C1L,EAAS0L,QAAQ/hB,QACjBqW,EAAS0L,QAAQ/hB,SAAQ,SAACP,EAAOmO,GAC7BmU,EAAQnU,EAAItB,eAAiB7M,CACjC,IAE8B4W,EAAS0L,QAAUhd,OAAS/E,SAAQ,SAAC4N,GAC/DmU,EAAQnU,EAAItB,eAAiB+J,EAAS0L,QAAQU,IAAI7U,EACtD,IACH,kBAEM,CACHmU,QAASA,EACTzL,WAAYD,EAASpL,OACrByX,cAAerM,EAASsM,WACxBvE,MAAM5iB,EAAAA,EAAAA,IAAS,IAAImM,WAAWyW,MACjC,2C,2SC5CCviB,EAAS,IAAIC,EAAAA,GCTI,aDavB,SAAS8mB,EAAQ9T,GACb,OAAO,IAAIC,SAAQ,SAACC,GAChBC,WAAWD,EAASF,EACxB,GACJ,CAEA,SAAS+T,EAAQpjB,EAAYwJ,GACzB,GAAa,MAATxJ,EAAiB,OAAO,KAE5B,GAAsB,kBAAXA,EAAuB,OAAOA,EAEzC,IAAIqjB,EAAAA,EAAAA,IAAYrjB,GAAQ,CACpB,GAAIwJ,IAAgC,SAAvBA,EAAKjD,MAAM,KAAK,IAA+C,qBAA9BiD,EAAKjD,MAAM,KAAK,GAAG+c,QAC7D,IACI,OAAOtS,EAAAA,EAAAA,IAAahR,EACP,CAAf,MAAOlD,GAAQ,CAErB,OAAO8L,EAAAA,EAAAA,IAAQ5I,E,CAGnB,OAAOA,CACX,CA6UM,SAAUmU,EAAUmN,EAAqC5K,EAAe6M,GAC1E,IAuBI5E,EAAmB,KACvB,GAAY,MAARjI,EAAc,CACdiI,GAAOrW,EAAAA,EAAAA,IAAYoO,GAGnB,IAAM8M,EAAkD,kBAAhBlC,EAA6B,CAAEtjB,IAAKsjB,IAAepV,EAAAA,EAAAA,IAAYoV,GACvG,GAAIkC,EAAQlB,QAC6G,IAA7F1T,OAAOtJ,KAAKke,EAAQlB,SAASlc,QAAO,SAACqd,GAAC,MAA0B,iBAApBA,EAAE5W,aAAgC,IAAGjR,SAErG4nB,EAAQlB,SAAUpW,EAAAA,EAAAA,IAAYsX,EAAQlB,SACtCkB,EAAQlB,QAAQ,gBAAkB,yBAGtCkB,EAAQlB,QAAU,CAAE,eAAgB,oBAExChB,EAAakC,C,CAGjB,OAzTE,SAAqClC,EAAqC3C,EAAmB4E,GAG/F,IAAMG,EAAuC,kBAAhBpC,GAAwD,MAA5BA,EAAWqC,cAAyBrC,EAAWqC,cAAe,GACvHvnB,EAAOwnB,eAAgBF,EAAe,GAAMA,EAAe,IAAO,EAC9D,oCAAqC,2BAA4BA,GAErE,IAAMG,EAA4C,kBAAhBvC,EAA4BA,EAAWuC,iBAAkB,KACrFC,EAAgD,kBAAhBxC,GAAwE,kBAArCA,EAAWwC,qBAAsCxC,EAAWwC,qBAAsB,IAC3J1nB,EAAOwnB,eAAgBE,EAAuB,GAAMA,EAAuB,IAAO,EAC9E,4CAA6C,kCAAmCA,GAEpF,IAAMnN,EAA4C,kBAAhB2K,KAA+BA,EAAW3K,iBAEtE2L,EAAqC,CAAC,EAExCtkB,EAAc,KAGZtB,EAAmB,CACrBoe,OAAQ,OAGRiJ,GAAW,EAEX7K,EAAU,KAEd,GAA2B,kBAAhBoI,EACPtjB,EAAMsjB,OAEH,GAA2B,kBAAhBA,EAA0B,CAWxC,GAVkB,MAAdA,GAAwC,MAAlBA,EAAWtjB,KACjC5B,EAAO2D,mBAAmB,cAAe,iBAAkBuhB,GAG/DtjB,EAAMsjB,EAAWtjB,IAEkB,kBAAxBsjB,EAAWpI,SAAyBoI,EAAWpI,QAAU,IAChEA,EAAUoI,EAAWpI,SAGrBoI,EAAWgB,QACX,IAAK,IAAMnU,KAAOmT,EAAWgB,QACzBA,EAAQnU,EAAItB,eAAiB,CAAEsB,IAAKA,EAAKnO,MAAO/D,OAAOqlB,EAAWgB,QAAQnU,KACtE,CAAC,gBAAiB,qBAAqB7Q,QAAQ6Q,EAAItB,gBAAkB,IACrEkX,GAAW,GAOvB,GAFArnB,EAAQsnB,YAAc1C,EAAW0C,UAEV,MAAnB1C,EAAW2C,MAAuC,MAAvB3C,EAAWjB,SAAkB,CAC5B,WAAxBriB,EAAI+O,UAAU,EAAG,KAA8D,IAA3CuU,EAAW4C,6BAC/C9nB,EAAOuW,WACH,mDACAtW,EAAAA,GAAAA,OAAAA,iBACA,CAAE8nB,SAAU,MAAOnmB,IAAKA,EAAKimB,KAAM3C,EAAW2C,KAAM5D,SAAU,eAItE,IAAM+D,EAAgB9C,EAAW2C,KAAO,IAAM3C,EAAWjB,SACzDiC,EAAuB,cAAI,CACvBnU,IAAK,gBACLnO,MAAO,UAAW8U,EAAAA,EAAAA,IAAaxM,EAAAA,EAAAA,IAAY8b,I,CAIlB,MAA7B9C,EAAWiB,iBACX7lB,EAAQ6lB,iBAAmBjB,EAAWiB,gBAGX,MAA3BjB,EAAWsB,eACXlmB,EAAQkmB,cAAe1W,EAAAA,EAAAA,IAAYoV,EAAWsB,c,CAItD,IAzFe5iB,EAyFTqkB,EAAS,IAAIxT,OAAO,kCAAmC,KACvDyT,EAActmB,EAAOA,EAAIoT,MAAMiT,GAAS,KAC9C,GAAIC,EACA,IACI,IAAM1N,EAAW,CACbC,WAAY,IACZoM,cAAe,KACfX,QAAS,CAAE,eAAiBgC,EAAU,IAAM,cAC5C3F,KAAO2F,EAAU,IAAKC,EAAAA,EAAAA,GAAaD,EAAU,KAjG1CtkB,EAiGyDskB,EAAU,IAhG3Ehc,EAAAA,EAAAA,IAAYtI,EAAM+N,QAAQ,yBAAyB,SAACuK,EAAKlG,GAC5D,OAAOnW,OAAOC,aAAa4R,SAASsE,EAAM,IAC9C,OAiGY9R,EAAwBsW,EAAS+H,KAIrC,OAHI4E,IACAjjB,EAASijB,EAAY3M,EAAS+H,KAAM/H,IAEjCtH,QAAQC,QAAoBjP,E,CAErC,MAAOxD,GACLV,EAAOuW,WAAW,4BAA6BtW,EAAAA,GAAAA,OAAAA,aAA4B,CACvEsiB,KAAMyE,EAAQkB,EAAU,GAAIA,EAAU,IACtCxnB,MAAOA,EACP0nB,YAAa,KACbC,cAAe,MACfzmB,IAAKA,G,CAKb2gB,IACAjiB,EAAQoe,OAAS,OACjBpe,EAAQiiB,KAAOA,EACgB,MAA3B2D,EAAQ,kBACRA,EAAQ,gBAAkB,CAAEnU,IAAK,eAAgBnO,MAAO,6BAE3B,MAA7BsiB,EAAQ,oBACRA,EAAQ,kBAAoB,CAAEnU,IAAK,iBAAkBnO,MAAO/D,OAAO0iB,EAAK/iB,WAIhF,IAAM8oB,EAA2C,CAAC,EAClD9V,OAAOtJ,KAAKgd,GAAS/hB,SAAQ,SAAC4N,GAC1B,IAAMwW,EAASrC,EAAQnU,GACvBuW,EAAYC,EAAOxW,KAAOwW,EAAO3kB,KACrC,IACAtD,EAAQ4lB,QAAUoC,EAElB,IAAME,EAAkB,WACpB,IAAIjK,EAAsB,KAuB1B,MAAO,CAAEkK,QAtBuB,IAAIvV,SAAQ,SAASC,EAAS8J,GACtDH,IACAyB,EAAQnL,YAAW,WACF,MAATmL,IACJA,EAAQ,KAERtB,EAAOjd,EAAO0b,UAAU,UAAWzb,EAAAA,GAAAA,OAAAA,QAAuB,CACtDmoB,YAAapB,EAAQ1mB,EAAQiiB,KAAM+F,EAAY,iBAC/CD,cAAe/nB,EAAQoe,OACvB5B,QAASA,EACTlb,IAAKA,KAEb,GAAGkb,GAEX,IAQkB4L,OANH,WACE,MAATnK,IACJE,aAAaF,GACbA,EAAQ,KACZ,EAGJ,CAzBwB,GA2BlBoK,EAAgB,W,uJAETnJ,EAAU,EAAC,YAAEA,EAAU8H,GAAY,iBAIzB,OAHX9M,EAA2B,KAAI,kBAGdyL,EAAOrkB,EAAKtB,GAAQ,OAA7B,GAARka,EAAW,EAAH,OAEJgF,EAAU8H,GAAY,oBACM,MAAxB9M,EAASC,YAA8C,MAAxBD,EAASC,WAAkB,iBAEV,GAA1CmO,EAAWpO,EAAS0L,QAAQ0C,UAAY,GACvB,QAAnBtoB,EAAQoe,SAAoBkK,EAAS5T,MAAM,WAAU,iBACrB,OAAhCpT,EAAM4Y,EAAS0L,QAAQ0C,SAAS,2DAIL,MAAxBpO,EAASC,WAAkB,iBAEf,GAAfoO,GAAW,GACXpB,EAAkB,CAAF,gBACL,OADK,UACCA,EAAiBjI,EAAS5d,GAAI,QAA/CinB,EAAW,EAAH,iBAGRA,EAAU,CAAF,gBAWR,OAVI7V,EAAQ,EAEN8V,EAAatO,EAAS0L,QAAQ,eAEhClT,EADuB,kBAAhB8V,GAA4BA,EAAW9T,MAAM,iBACrB,IAAvBtD,SAASoX,GAETpB,EAAuBhW,SAAS7R,OAAO4F,KAAKsjB,SAAWtjB,KAAKujB,IAAI,EAAGxJ,KAG/E,UACMuH,EAAQ/T,GAAM,iGAQhB,OADhBwH,EAAiB,KAAOA,YAEpBgO,EAAeE,SACf1oB,EAAOuW,WAAW,mBAAoBtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC9DmoB,YAAapB,EAAQ1mB,EAAQiiB,KAAM+F,EAAY,iBAC/CD,cAAe/nB,EAAQoe,OACvBgG,YAAa,EAAF,GACX9iB,IAAKA,KAEZ,QAkBJ,GAdG2gB,EAAO/H,EAAS+H,KAEhBoF,GAAoC,MAAxBnN,EAASC,WACrB8H,EAAO,MACChI,IAAqBC,EAASC,WAAa,KAAOD,EAASC,YAAc,OACjF+N,EAAeE,SACf1oB,EAAOuW,WAAW,eAAgBtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC1DmP,OAAQoL,EAASC,WACjByL,QAAS1L,EAAS0L,QAClB3D,KAAMyE,EAAQzE,EAAQ/H,EAAS0L,QAAW1L,EAAS0L,QAAQ,gBAAiB,MAC5EkC,YAAapB,EAAQ1mB,EAAQiiB,KAAM+F,EAAY,iBAC/CD,cAAe/nB,EAAQoe,OACvB9c,IAAKA,MAITulB,EAAa,CAAF,gBAEQ,OAFR,oBAEcA,EAAY5E,EAAM/H,GAAS,QACxB,OADlBtW,EAAS,EAAH,KACZskB,EAAeE,SAAS,kBACjBxkB,GAAM,wCAIT,KAAM+kB,eAAiBzJ,EAAU8H,GAAY,iBAC1B,GAAfuB,GAAW,GACXpB,EAAkB,CAAF,gBACL,OADK,UACCA,EAAiBjI,EAAS5d,GAAI,QAA/CinB,EAAW,EAAH,iBAGRA,EAAU,CAAF,gBAGR,OAFM/L,EAAU4K,EAAuBhW,SAAS7R,OAAO4F,KAAKsjB,SAAWtjB,KAAKujB,IAAI,EAAGxJ,KACnF,UACMuH,EAAQjK,GAAQ,+CAK9B0L,EAAeE,SACf1oB,EAAOuW,WAAW,4BAA6BtW,EAAAA,GAAAA,OAAAA,aAA4B,CACvEsiB,KAAMyE,EAAQzE,EAAQ/H,EAAS0L,QAAW1L,EAAS0L,QAAQ,gBAAiB,MAC5ExlB,MAAO,EAAF,GACL0nB,YAAapB,EAAQ1mB,EAAQiiB,KAAM+F,EAAY,iBAC/CD,cAAe/nB,EAAQoe,OACvB9c,IAAKA,IACN,QAOX,OAHA4mB,EAAeE,SAGf,kBACoBnG,GAAK,QA1GiB/C,IAAS,gDA6GhDxf,EAAOuW,WAAW,kBAAmBtW,EAAAA,GAAAA,OAAAA,aAA4B,CACpEmoB,YAAapB,EAAQ1mB,EAAQiiB,KAAM+F,EAAY,iBAC/CD,cAAe/nB,EAAQoe,OACvB9c,IAAKA,KACP,iE,CAnHgB,GAsHtB,OAAOsR,QAAQgW,KAAK,CAAEV,EAAeC,QAASE,GAClD,CA4CWQ,CAAgBjE,EAAY3C,GAzCb,SAAC3e,EAAmB4W,GACtC,IAAItW,EAAc,KAClB,GAAa,MAATN,EACA,IACIM,EAAS+T,KAAKoK,OAAMzN,EAAAA,EAAAA,IAAahR,G,CACnC,MAAOlD,GACLV,EAAOuW,WAAW,eAAgBtW,EAAAA,GAAAA,OAAAA,aAA4B,CAC1DsiB,KAAM3e,EACNlD,MAAOA,G,CASnB,OAJIymB,IACAjjB,EAASijB,EAAYjjB,EAAQsW,IAG1BtW,CACX,GAwBJ,CAEM,SAAU6V,EAAQ3Z,EAAwBE,GAO5C,OANKA,IAAWA,EAAU,CAAC,GAEN,OADrBA,GAAUwP,EAAAA,EAAAA,IAAYxP,IACV2F,QAAiB3F,EAAQ2F,MAAQ,GACtB,MAAnB3F,EAAQ8oB,UAAmB9oB,EAAQ8oB,QAAU,KACzB,MAApB9oB,EAAQ+oB,WAAoB/oB,EAAQ+oB,SAAW,KAE5C,IAAInW,SAAQ,SAASC,EAAS8J,GAEjC,IAAIsB,EAAsB,KACtBpB,GAAgB,EAGduL,EAAS,WACX,OAAIvL,IACJA,GAAO,EACHoB,GAASE,aAAaF,IACnB,EACX,EAEIje,EAAQwc,UACRyB,EAAQnL,YAAW,WACXsV,KAAYzL,EAAO,IAAI3S,MAAM,WACrC,GAAGhK,EAAQwc,UAGf,IAAMwM,EAAahpB,EAAQgpB,WAEvB9J,EAAU,GACd,SAAS9V,IACL,OAAOtJ,IAAOyV,MAAK,SAAS3R,GAGxB,QAAewD,IAAXxD,EACIwkB,KAAYvV,EAAQjP,QAErB,GAAI5D,EAAQogB,SACfpgB,EAAQogB,SAASjN,KAAK,OAAQ/J,QAE3B,GAAIpJ,EAAQipB,UACfjpB,EAAQipB,UAAU9V,KAAK,QAAS/J,QAG7B,IAAKyT,EAAM,CAEd,KADAqC,EACc8J,EAEV,YADIZ,KAAYzL,EAAO,IAAI3S,MAAM,yBAIrC,IAAIwS,EAAUxc,EAAQ+oB,SAAW3X,SAAS7R,OAAO4F,KAAKsjB,SAAWtjB,KAAKujB,IAAI,EAAGxJ,KACzE1C,EAAUxc,EAAQ2F,QAAS6W,EAAUxc,EAAQ2F,OAC7C6W,EAAUxc,EAAQ8oB,UAAWtM,EAAUxc,EAAQ8oB,SAEnDhW,WAAW1J,EAAOoT,E,CAGtB,OAAO,IACX,IAAG,SAASpc,GACJgoB,KAAYzL,EAAOvc,EAC3B,GACJ,CACAgJ,EACJ,GACJ,C,6LE3dI8f,G,SAAyB,GACzBC,GAAgB,EACdC,EAAY,CAAEC,MAAO,EAAG,QAAW,EAAGC,KAAM,EAAGC,QAAS,EAAGnpB,MAAO,EAAGopB,IAAK,GAC5EC,EAAYL,EAAmB,QAE/BM,EAAgB,KA4BpB,IACWC,EAQAC,EATLC,EA3BN,WACI,IACI,IAAMC,EAAU,GAahB,GAXA,CAAC,MAAO,MAAO,OAAQ,QAAQjmB,SAAQ,SAACkmB,GACpC,IACI,GAA+B,SAA3B,OAAO9e,UAAU8e,GACjB,MAAM,IAAI/f,MAAM,gBAMpC,CAFY,MAAO5J,GACH0pB,EAAQ3qB,KAAK4qB,EAC7B,CACA,IACYD,EAAQ5qB,OACR,MAAM,IAAI8K,MAAM,WAAa8f,EAAQ3X,KAAK,OAE9C,GAAI5S,OAAOC,aAAa,KAAMyL,UAAU,SAAW1L,OAAOC,aAAa,IAAM,KACzE,MAAM,IAAIwK,MAAM,wBAK5B,CAFI,MAAO5J,GACH,OAAOA,EAAM+J,OACrB,CACI,OAAO,IACX,CACwB6f,IAExB,SAAWL,GACPA,EAAgB,MAAI,QACpBA,EAAe,KAAI,OACnBA,EAAkB,QAAI,UACtBA,EAAgB,MAAI,QACpBA,EAAc,IAAI,KACrB,CAND,CAMGA,IAAaA,EAAW,CAAC,IAE5B,SAAWC,GAIPA,EAAyB,cAAI,gBAE7BA,EAA2B,gBAAI,kBAG/BA,EAAiC,sBAAI,wBAGrCA,EAAyB,cAAI,gBAE7BA,EAAwB,aAAI,eAE5BA,EAAmB,QAAI,UAIvBA,EAA0B,eAAI,iBAI9BA,EAAyB,cAAI,gBAK7BA,EAAuB,YAAI,cAI3BA,EAA4B,iBAAI,mBAIhCA,EAA4B,iBAAI,mBAIhCA,EAA+B,oBAAI,sBAWnCA,EAA0B,eAAI,iBAG9BA,EAA8B,mBAAI,qBAGlCA,EAAyB,cAAI,gBAG7BA,EAAmC,wBAAI,0BAGvCA,EAAmC,wBAAI,0BAOvCA,EAAgC,qBAAI,uBAKpCA,EAA2B,gBAAI,iBAClC,CA7ED,CA6EGA,IAAcA,EAAY,CAAC,IAE9B,IAAMK,EAAM,mBACCtqB,EAAM,WACf,WAAY6D,IAAS,eACjB0O,OAAOgY,eAAe9d,KAAM,UAAW,CACnC+d,YAAY,EACZ7mB,MAAOE,EACP4mB,UAAU,GAEtB,CA2NK,OA3NA,4BACD,SAAKC,EAAUjJ,GACX,IAAMkJ,EAAQD,EAASla,cACC,MAApBiZ,EAAUkB,IACVle,KAAK/I,mBAAmB,yBAA0B,WAAYgnB,GAE9DZ,EAAYL,EAAUkB,IAG1BC,QAAQ5O,IAAI4F,MAAMgJ,QAASnJ,EACnC,GAAK,mBACD,WAAe,2BAANA,EAAI,yBAAJA,EAAI,gBACThV,KAAKoe,KAAK7qB,EAAO8qB,OAAOC,MAAOtJ,EACvC,GAAK,kBACD,WAAc,2BAANA,EAAI,yBAAJA,EAAI,gBACRhV,KAAKoe,KAAK7qB,EAAO8qB,OAAOE,KAAMvJ,EACtC,GAAK,kBACD,WAAc,2BAANA,EAAI,yBAAJA,EAAI,gBACRhV,KAAKoe,KAAK7qB,EAAO8qB,OAAOG,QAASxJ,EACzC,GAAK,uBACD,SAAUjX,EAASuL,EAAM6I,GAErB,GAAI4K,EACA,OAAO/c,KAAKgP,UAAU,iBAAkB1F,EAAM,CAAC,GAE9CA,IACDA,EAAO/V,EAAOkrB,OAAOC,eAEpBvM,IACDA,EAAS,CAAC,GAEd,IAAMwM,EAAiB,GACvB7Y,OAAOtJ,KAAK2V,GAAQ1a,SAAQ,SAAC4N,GACzB,IAAMnO,EAAQib,EAAO9M,GACrB,IACI,GAAInO,aAAiBkI,WAAY,CAE7B,IADA,IAAIoB,EAAM,GACD3N,EAAI,EAAGA,EAAIqE,EAAMpE,OAAQD,IAC9B2N,GAAOqd,EAAI3mB,EAAMrE,IAAM,GACvB2N,GAAOqd,EAAe,GAAX3mB,EAAMrE,IAErB8rB,EAAe5rB,KAAKsS,EAAM,iBAAmB7E,EAAM,IACvE,MAEoBme,EAAe5rB,KAAKsS,EAAM,IAAMkG,KAAKC,UAAUtU,GAKnE,CAFY,MAAOlD,GACH2qB,EAAe5rB,KAAKsS,EAAM,IAAMkG,KAAKC,UAAU2G,EAAO9M,GAAK5G,YAC3E,CACA,IACQkgB,EAAe5rB,KAAK,QAAD,OAASuW,IAC5BqV,EAAe5rB,KAAK,WAAD,OAAYiN,KAAK5I,UACpC,IAAMqa,EAAS1T,EACX7I,EAAM,GACV,OAAQoU,GACJ,KAAKkU,EAAUoB,cACX1pB,EAAM,gBACN,IAAM2pB,EAAQ9gB,EACd,OAAQ8gB,GACJ,IAAK,WACL,IAAK,YACL,IAAK,mBACD3pB,GAAO,IAAM2pB,EACb,MACJ,IAAK,iBACL,IAAK,iBACD3pB,GAAO,eACP,MACJ,IAAK,yBACDA,GAAO,kBAGf,MAEJ,KAAKsoB,EAAUsB,eACf,KAAKtB,EAAUuB,mBACf,KAAKvB,EAAUwB,YACf,KAAKxB,EAAUyB,cACf,KAAKzB,EAAU0B,wBACf,KAAK1B,EAAU2B,qBACf,KAAK3B,EAAU4B,wBACXlqB,EAAMoU,EAGVpU,IACA6I,GAAW,8CAAiD7I,EAAM,MAElEypB,EAAe7rB,SACfiL,GAAW,KAAO4gB,EAAe5Y,KAAK,MAAQ,KAGlD,IAAM/R,EAAQ,IAAI4J,MAAMG,GAMxB,OALA/J,EAAMyd,OAASA,EACfzd,EAAMsV,KAAOA,EACbxD,OAAOtJ,KAAK2V,GAAQ1a,SAAQ,SAAU4N,GAClCrR,EAAMqR,GAAO8M,EAAO9M,EAChC,IACerR,CACf,GAAK,wBACD,SAAW+J,EAASuL,EAAM6I,GACtB,MAAMnS,KAAKgP,UAAUjR,EAASuL,EAAM6I,EAC5C,GAAK,gCACD,SAAmBpU,EAAStJ,EAAMyC,GAC9B,OAAO8I,KAAK6J,WAAW9L,EAASxK,EAAOkrB,OAAOY,iBAAkB,CAC5DhE,SAAU5mB,EACVyC,MAAOA,GAEnB,GAAK,oBACD,SAAOooB,EAAWvhB,EAASuL,EAAM6I,GACvBmN,GAGNtf,KAAK6J,WAAW9L,EAASuL,EAAM6I,EACvC,GAAK,4BACD,SAAemN,EAAWvhB,EAAStJ,EAAMyC,GAC/BooB,GAGNtf,KAAK/I,mBAAmB8G,EAAStJ,EAAMyC,EAC/C,GAAK,4BACD,SAAe6G,GAIP0f,GACAzd,KAAK6J,WAAW,8CAA+CtW,EAAOkrB,OAAOc,sBAAuB,CAChGrV,UAAW,6BAA8ByT,KAAMF,GAG/D,GAAK,6BACD,SAAgBvmB,EAAO6G,GACI,kBAAX7G,IAGG,MAAX6G,IACAA,EAAU,mBAEV7G,EAAQ,GAAKA,GAAS,mBACtB8I,KAAK6J,WAAW9L,EAASxK,EAAOkrB,OAAOG,cAAe,CAClD1U,UAAW,mBACX2U,MAAO,oBACP3nB,MAAOA,IAGXA,EAAQ,GACR8I,KAAK6J,WAAW9L,EAASxK,EAAOkrB,OAAOG,cAAe,CAClD1U,UAAW,mBACX2U,MAAO,cACP3nB,MAAOA,IAGvB,GAAK,gCACD,SAAmBsoB,EAAOC,EAAe1hB,GAEjCA,EADAA,EACU,KAAOA,EAGP,GAEVyhB,EAAQC,GACRzf,KAAK6J,WAAW,mBAAqB9L,EAASxK,EAAOkrB,OAAOiB,iBAAkB,CAC1EF,MAAOA,EACPC,cAAeA,IAGnBD,EAAQC,GACRzf,KAAK6J,WAAW,qBAAuB9L,EAASxK,EAAOkrB,OAAOkB,oBAAqB,CAC/EH,MAAOA,EACPC,cAAeA,GAG/B,GAAK,sBACD,SAASG,EAAQC,GACTD,IAAW9Z,QAAoB,MAAV8Z,GACrB5f,KAAK6J,WAAW,cAAetW,EAAOkrB,OAAOO,YAAa,CAAEvqB,KAAMorB,EAAKprB,MAEnF,GAAK,2BACD,SAAcmrB,EAAQC,GACdD,IAAWC,EACX7f,KAAK6J,WAAW,qCAAuC0B,KAAKC,UAAUqU,EAAKprB,MAAQ,6BAA8BlB,EAAOkrB,OAAOc,sBAAuB,CAAE9qB,KAAMmrB,EAAOnrB,KAAMyV,UAAW,QAEjL0V,IAAW9Z,QAAoB,MAAV8Z,GAC1B5f,KAAK6J,WAAW,cAAetW,EAAOkrB,OAAOO,YAAa,CAAEvqB,KAAMorB,EAAKprB,MAEnF,IAAK,2BACD,WAII,OAHK6oB,IACDA,EAAgB,IAAI/pB,EC/TT,iBDiUR+pB,CACf,GAAK,2BACD,SAAqBwC,EAAYC,GAM7B,IALKD,GAAcC,GACf/f,KAAKggB,eAAenW,WAAW,wCAAyCtW,EAAOkrB,OAAOc,sBAAuB,CACzGrV,UAAW,kBAGf4S,EAAwB,CACxB,IAAKgD,EACD,OAEJ9f,KAAKggB,eAAenW,WAAW,6BAA8BtW,EAAOkrB,OAAOc,sBAAuB,CAC9FrV,UAAW,iBAE3B,CACQ6S,IAAkB+C,EAClBhD,IAA2BiD,CACnC,GAAK,yBACD,SAAmB9B,GACf,IAAMC,EAAQlB,EAAUiB,EAASla,eACpB,MAATma,EAIJb,EAAYa,EAHR3qB,EAAOysB,eAAe7Z,KAAK,uBAAyB8X,EAIhE,GAAK,kBACD,SAAY7mB,GACR,OAAO,IAAI7D,EAAO6D,EAC1B,KAAK,EAlOc,GAoOnB7D,EAAOkrB,OAASjB,EAChBjqB,EAAO8qB,OAASd,EEjWT,ICYDjqB,EAAS,IAAIC,EDZI,oBCahB,SAASyT,EAAe5B,EAAQ3Q,EAAMyC,GACzC4O,OAAOgY,eAAe1Y,EAAQ3Q,EAAM,CAChCspB,YAAY,EACZ7mB,MAAOA,EACP8mB,UAAU,GAElB,CA4CA,IAAMiC,EAAS,CAAEC,QAAQ,EAAMxc,SAAS,EAAM,UAAY,EAAMjD,QAAQ,EAAM0f,QAAQ,GACtF,SAASC,EAAUhb,GAEf,QAAepK,IAAXoK,GAAmC,OAAXA,GAAmB6a,SAAe7a,GAC1D,OAAO,EAEX,GAAItN,MAAMC,QAAQqN,IAA+B,kBAAZA,EAAsB,CACvD,IAAKU,OAAOua,SAASjb,GACjB,OAAO,EAGX,IADA,IAAM5I,EAAOsJ,OAAOtJ,KAAK4I,GAChBvS,EAAI,EAAGA,EAAI2J,EAAK1J,OAAQD,IAAK,CAClC,IAAIqE,EAAQ,KACZ,IACIA,EAAQkO,EAAO5I,EAAK3J,GAMpC,CAJY,MAAOmB,GAGH,QAChB,CACY,IAAKosB,EAAUlpB,GACX,OAAO,CAEvB,CACQ,OAAO,CACf,CACI,OAAO5D,EAAO2D,mBAAmB,mBAAD,cAA4BmO,GAAW,SAAUA,EACrF,CAGA,SAASkb,EAAUlb,GACf,GAAIgb,EAAUhb,GACV,OAAOA,EAGX,GAAItN,MAAMC,QAAQqN,GACd,OAAOU,OAAO6R,OAAOvS,EAAOtL,KAAI,SAACymB,GAAI,OAAKjI,EAASiI,EAAK,KAE5D,GAAwB,kBAAZnb,EAAsB,CAC9B,IAAM5N,EAAS,CAAC,EAChB,IAAK,IAAM6N,KAAOD,EAAQ,CACtB,IAAMlO,EAAQkO,EAAOC,QACPrK,IAAV9D,GAGJ8P,EAAexP,EAAQ6N,EAAKiT,EAASphB,GACjD,CACQ,OAAOM,CACf,CACI,OAAOlE,EAAO2D,mBAAmB,mBAAD,cAA4BmO,GAAW,SAAUA,EACrF,CACO,SAASkT,EAASlT,GACrB,OAAOkb,EAAUlb,EACrB,CClHA,IAaaob,EAAc,WAUzB,WACmBC,GAC6C,IAA7CC,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAzBkB,KAyB2B,eAD7C,KAAW,YAAXD,EACA,KAAY,aAAZC,EAJX,KAAY,aAAwB,E,CAiF3C,OA1ED,sCAOM,SAAevI,G,mJAuBlB,OAtBKwI,EAAgC,CACpCxI,QAAAA,EACA1R,aAASzL,EACTuV,YAAQvV,GAGJ+gB,EAAU,IAAIvV,SAAQ,SAACC,EAAS8J,GACpCoQ,EAAgBla,QAAUA,EAC1Bka,EAAgBpQ,OAASA,CAC3B,IAEAvQ,KAAK4gB,aAAa7tB,KAAK4tB,GAEnB3gB,KAAK4gB,aAAa9tB,SAAWkN,KAAK0gB,aAE/B1gB,KAAK6gB,mBACA7gB,KAAK8gB,oBAEf9gB,KAAK8gB,kBAAoBpa,YACvB,kBAAM,EAAKma,kBAAkB,GApDE,KAuDlC,kBAEM9E,GAAO,+CACf,GAED,8BAIc,W,4IAW2C,OARjDgF,EAAQ/gB,KAAK4gB,aACnB5gB,KAAK4gB,aAAe,GAChB5gB,KAAK8gB,oBACP/O,aAAa/R,KAAK8gB,mBAClB9gB,KAAK8gB,uBAAoB9lB,GAIrBmd,EAAU4I,EAAMjnB,KAAI,SAAAknB,GAAQ,OAAIA,EAAS7I,OAAO,IAAC,kBAEhDnY,KAAKygB,YAAYtI,GAAShP,MAC/B,SAAA3R,GAGEupB,EAAMtpB,SAAQ,SAACkpB,EAAiBM,GAC9B,IAAMjL,EAAUxe,EAAOypB,GACvB,GAAIjL,EAAQhiB,MAAO,CACjB,IAAMA,EAAQ,IAAI4J,MAAMoY,EAAQhiB,MAAM+J,SACrC/J,EAAcsV,KAAO0M,EAAQhiB,MAAMsV,KACnCtV,EAAcpB,KAAOojB,EAAQhiB,MAAMpB,KACpC+tB,EAAgBpQ,OAAQvc,EACzB,MACC2sB,EAAgBla,QAASuP,EAAQxe,OAErC,G,IAEF,SAAAxD,GACE+sB,EAAMtpB,SAAQ,SAAAkpB,GACZA,EAAgBpQ,OAAQvc,EAC1B,GACF,KACD,+CACF,OAzFwB,GCoBdG,EACX,0CAcA,WAAY+sB,GAAqB,sBAE/B,IAAMC,EAAShtB,EAAgBitB,UAAUF,EAAOC,QAG1CE,EAAiBltB,EAAgBmtB,kBAAkBJ,EAAOztB,SAC1D+kB,EAAarkB,EAAgBotB,yBACjCF,EACAF,EACA,aAKiBnmB,IAAfkmB,EAAOhsB,MACTsjB,EAAWtjB,IAAMgsB,EAAOhsB,KAG1BsjB,EAAWqC,cAAgBqG,EAAOM,WAKlC,IAAMC,EAAgBC,EAAAA,EAAcL,IACpC,cAAM7I,EAAYiJ,IAEbN,OAASD,EAAOC,OACrB,EAAKK,WAAaN,EAAOM,WACzB,EAAKG,cAAgBT,EAAOS,cAG5B,IAAMC,EAAyB9b,OAAAA,OAAAA,CAAAA,EAAAA,EAAK0S,YACpCoJ,EAAkBpI,QAAS,6BAA+B,YAMX,OAA/C,EAAKqI,QAAU,IAAIrB,GALC,SAClBsB,GAEA,OAAOzW,EAAAA,EAAAA,IAAUuW,EAAmBrW,KAAKC,UAAUsW,GACrD,IAC+C,C,CA8FhD,OA3FD,qCAmGM,WAAa,W,wPACS,GACX,OADXruB,EAAUuM,KAAKvM,SACA,gBACP,OADO,SACDsuB,EAAMrV,cAAa,WAAE,OAA9B,GAAPjZ,EAAU,EAAH,KAEO,CAAF,qBACJ,IAAImK,MAAM,uBAAsB,gCAGnCnK,GAAO,+CACf,8BAED,YACEuuB,EAAAA,EAAAA,GAAQ,6D,GAGV,iCAMA,WACE,OAAOhiB,KAAKmhB,SAAWc,EAAAA,C,qBAazB,SAAKjQ,EAAgBG,GACnB,OAAOnS,KAAKkiB,MAAMlQ,EAAQG,EAAQ,O,GAGpC,mBASA,SACEH,EACAG,EACAgQ,GACkB,WAAlBC,EAAa,UAAH,8CAEJjK,EAAU,CACdnG,OAAAA,EACAG,OAAAA,EACAiG,GAAIpY,KAAK4X,UACTS,QAAS,OAILG,EAAkB1S,OAAAA,OAAAA,CAAAA,EAAAA,KAAK0S,YAG7B,GAFAA,EAAWgB,QAAS,6BAA+B2I,EAE/CniB,KAAK2hB,eAAiBS,EACxB,OAAOpiB,KAAK6hB,QAAQQ,eAAelK,GAIrCnY,KAAK+M,KAAK,QAAS,CACjBiK,OAAQ,UACRmB,QAASG,EAASH,GAClB5jB,SAAUyL,OAKZ,IAAMuY,EAAQ,CAAC,cAAe,mBAAmB/jB,QAAQwd,IAAW,EACpE,GAAIuG,GAASvY,KAAK8X,OAAO9F,GACvB,OAAOhS,KAAK8X,OAAO9F,GAGrB,IAAMxa,GAAS6T,EAAAA,EAAAA,IACbrL,KAAKwY,WACLjN,KAAKC,UAAU2M,GACfpC,GACA5M,MACA,SAAA3R,GAQE,OAPA,EAAKuV,KAAK,QAAS,CACjBiK,OAAQ,WACRmB,QAAAA,EACArK,SAAUtW,EACVjD,SAAU,IAGLiD,C,IAET,SAAAxD,GAQE,MAPA,EAAK+Y,KAAK,QAAS,CACjBiK,OAAQ,WACRhjB,MAAAA,EACAmkB,QAAAA,EACA5jB,SAAU,IAGNP,CACR,IAYF,OARIukB,IACFvY,KAAK8X,OAAO9F,GAAUxa,EACtBkP,YAAW,WAET,EAAKoR,OAAO9F,GAAU,I,GACrB,IAGExa,C,IACR,wBArND,SAAiB2pB,GACf,GAAc,MAAVA,EACF,OAAOc,EAAAA,EAET,GAAId,GAA4B,kBAAXA,EACnB,MAAM,IAAIvjB,MAAM,mBAAD,OACMujB,EAAM,yCAG7B,OAAOA,C,GAGT,wBASA,SAAkB1tB,GAChB,MAAuB,kBAAZA,GAAwBA,KAAW6uB,EAAAA,EACrCA,EAAAA,EAAe7uB,IAIjB8uB,EAAAA,EAAAA,GAAqB9uB,E,GAG9B,+BAKA,SAAyBA,GACvB,QAAgBuH,IAAZvH,EACF,OAAO+uB,EAAAA,EAGT,GAAuB,kBAAZ/uB,EACT,MAAM,IAAImK,MAAM,oBAAD,OACOnK,EAAO,0CAM/B,IADuBqS,OAAO+M,OAAO4P,EAAAA,GAASC,SAASjvB,GAErD,MAAM,IAAImK,MACR,2BAAoBnK,EAAO,kDACtBqS,OAAO+M,OAAO4P,EAAAA,GAAS1c,KAAK,MAAK,MAG1C,OAAOtS,C,GAGT,sCAMA,SACEA,EACA0tB,EACAzgB,GAEA,IAAMxL,EACK,SAATwL,GACIiiB,EAAAA,EAAAA,GAAkBlvB,EAAS0tB,IAC3ByB,EAAAA,EAAAA,GAAgBnvB,EAAS0tB,GAC/B,MAAO,CACL3H,QAASqJ,EAAAA,EACL,CACE,6BAA8BC,EAAAA,GAEhC,CACE,6BAA8BA,EAAAA,EAC9B,kBAAmB,QAEzB5H,WAAW,EACXhmB,IAAAA,E,KAEH,EAlJD,CAAQC,EAAAA,GA6RV,SAAS4gB,EAAUC,GAIjB,GAAIA,EAAQhiB,MAAO,CACjB,IAAMA,EAAa,IAAI4J,MAAMoY,EAAQhiB,MAAM+J,SAG3C,MAFA/J,EAAMsV,KAAO0M,EAAQhiB,MAAMsV,KAC3BtV,EAAMpB,KAAOojB,EAAQhiB,MAAMpB,KACrBoB,CACP,CAED,OAAOgiB,EAAQxe,MACjB,C,mBCzUA,IAJA,IAAIurB,EAAW,mCAGXC,EAAe,CAAC,EACXC,EAAI,EAAGA,EAAIF,EAASjwB,OAAQmwB,IAAK,CACxC,IAAIlpB,EAAIgpB,EAASG,OAAOD,GAExB,QAAwBjoB,IAApBgoB,EAAajpB,GAAkB,MAAM,IAAIopB,UAAUppB,EAAI,iBAC3DipB,EAAajpB,GAAKkpB,CACpB,CAEA,SAASG,EAAaC,GACpB,IAAIzpB,EAAIypB,GAAO,GACf,OAAe,SAANA,IAAoB,EACR,YAAfzpB,GAAK,EAAK,GACK,YAAfA,GAAK,EAAK,GACK,YAAfA,GAAK,EAAK,GACK,aAAfA,GAAK,EAAK,GACK,YAAfA,GAAK,EAAK,EAClB,CAEA,SAAS0pB,EAAW/b,GAElB,IADA,IAAIgc,EAAM,EACD1wB,EAAI,EAAGA,EAAI0U,EAAOzU,SAAUD,EAAG,CACtC,IAAI2wB,EAAIjc,EAAOvU,WAAWH,GAC1B,GAAI2wB,EAAI,IAAMA,EAAI,IAAK,MAAO,mBAAqBjc,EAAS,IAE5Dgc,EAAMH,EAAYG,GAAQC,GAAK,CACjC,CAGA,IAFAD,EAAMH,EAAYG,GAEb1wB,EAAI,EAAGA,EAAI0U,EAAOzU,SAAUD,EAAG,CAClC,IAAIqF,EAAIqP,EAAOvU,WAAWH,GAC1B0wB,EAAMH,EAAYG,GAAY,GAAJrrB,CAC5B,CACA,OAAOqrB,CACT,CAkCA,SAASE,EAAUC,EAAKC,GAEtB,GADAA,EAAQA,GAAS,GACbD,EAAI5wB,OAAS,EAAG,OAAO4wB,EAAM,aACjC,GAAIA,EAAI5wB,OAAS6wB,EAAO,MAAO,uBAG/B,IAAIC,EAAUF,EAAI3f,cACd8f,EAAUH,EAAIhlB,cAClB,GAAIglB,IAAQE,GAAWF,IAAQG,EAAS,MAAO,qBAAuBH,EAGtE,IAAIjmB,GAFJimB,EAAME,GAEUjmB,YAAY,KAC5B,IAAe,IAAXF,EAAc,MAAO,8BAAgCimB,EACzD,GAAc,IAAVjmB,EAAa,MAAO,sBAAwBimB,EAEhD,IAAInc,EAASmc,EAAIpoB,MAAM,EAAGmC,GACtBqmB,EAAYJ,EAAIpoB,MAAMmC,EAAQ,GAClC,GAAIqmB,EAAUhxB,OAAS,EAAG,MAAO,iBAEjC,IAAIywB,EAAMD,EAAU/b,GACpB,GAAmB,kBAARgc,EAAkB,OAAOA,EAGpC,IADA,IAAIpZ,EAAQ,GACHtX,EAAI,EAAGA,EAAIixB,EAAUhxB,SAAUD,EAAG,CACzC,IAAI2wB,EAAIM,EAAUZ,OAAOrwB,GACrBqF,EAAI8qB,EAAaQ,GACrB,QAAUxoB,IAAN9C,EAAiB,MAAO,qBAAuBsrB,EACnDD,EAAMH,EAAYG,GAAOrrB,EAGrBrF,EAAI,GAAKixB,EAAUhxB,QACvBqX,EAAMpX,KAAKmF,EACb,CAEA,OAAY,IAARqrB,EAAkB,wBAA0BG,EACzC,CAAEnc,OAAQA,EAAQ4C,MAAOA,EAClC,CAcA,SAAS4Z,EAASnxB,EAAMoxB,EAAQC,EAASC,GAMvC,IALA,IAAIhtB,EAAQ,EACRitB,EAAO,EACPC,GAAQ,GAAKH,GAAW,EAExBzsB,EAAS,GACJ3E,EAAI,EAAGA,EAAID,EAAKE,SAAUD,EAIjC,IAHAqE,EAASA,GAAS8sB,EAAUpxB,EAAKC,GACjCsxB,GAAQH,EAEDG,GAAQF,GACbE,GAAQF,EACRzsB,EAAOzE,KAAMmE,GAASitB,EAAQC,GAIlC,GAAIF,EACEC,EAAO,GACT3sB,EAAOzE,KAAMmE,GAAU+sB,EAAUE,EAASC,OAEvC,CACL,GAAID,GAAQH,EAAQ,MAAO,iBAC3B,GAAK9sB,GAAU+sB,EAAUE,EAASC,EAAM,MAAO,kBACjD,CAEA,OAAO5sB,CACT,CA0BA6sB,EAAOC,QAAU,CACfC,aAjEF,WACE,IAAIC,EAAMf,EAAStO,MAAM,KAAMsP,WAC/B,GAAmB,kBAARD,EAAkB,OAAOA,CACtC,EA+DE/xB,OA7DF,SAAiBixB,GACf,IAAIc,EAAMf,EAAStO,MAAM,KAAMsP,WAC/B,GAAmB,kBAARD,EAAkB,OAAOA,EAEpC,MAAM,IAAI5mB,MAAM4mB,EAClB,EAyDEtxB,OAzIF,SAAiBqU,EAAQ4C,EAAOwZ,GAE9B,GADAA,EAAQA,GAAS,GACZpc,EAAOzU,OAAS,EAAIqX,EAAMrX,OAAU6wB,EAAO,MAAM,IAAIR,UAAU,wBAKpE,IAAII,EAAMD,EAHV/b,EAASA,EAAOxD,eAIhB,GAAmB,kBAARwf,EAAkB,MAAM,IAAI3lB,MAAM2lB,GAG7C,IADA,IAAI/rB,EAAS+P,EAAS,IACb1U,EAAI,EAAGA,EAAIsX,EAAMrX,SAAUD,EAAG,CACrC,IAAIkH,EAAIoQ,EAAMtX,GACd,GAAKkH,GAAK,IAAO,EAAG,MAAM,IAAI6D,MAAM,kBAEpC2lB,EAAMH,EAAYG,GAAOxpB,EACzBvC,GAAUurB,EAASG,OAAOnpB,EAC5B,CAEA,IAAKlH,EAAI,EAAGA,EAAI,IAAKA,EACnB0wB,EAAMH,EAAYG,GAIpB,IAFAA,GAAO,EAEF1wB,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAEtB2E,GAAUurB,EAASG,OADVK,GAAkB,GAAT,EAAI1wB,GAAW,GAEnC,CAEA,OAAO2E,CACT,EA4GEktB,cA5BF,SAAwBzsB,GACtB,IAAIusB,EAAMT,EAAQ9rB,EAAO,EAAG,GAAG,GAC/B,GAAIH,MAAMC,QAAQysB,GAAM,OAAOA,CACjC,EA0BEG,QAxBF,SAAkB1sB,GAChB,IAAIusB,EAAMT,EAAQ9rB,EAAO,EAAG,GAAG,GAC/B,GAAIH,MAAMC,QAAQysB,GAAM,OAAOA,EAE/B,MAAM,IAAI5mB,MAAM4mB,EAClB,EAoBEI,gBAlBF,SAA0Bza,GACxB,IAAIqa,EAAMT,EAAQ5Z,EAAO,EAAG,GAAG,GAC/B,GAAIrS,MAAMC,QAAQysB,GAAM,OAAOA,CACjC,EAgBEK,UAdF,SAAoB1a,GAClB,IAAIqa,EAAMT,EAAQ5Z,EAAO,EAAG,GAAG,GAC/B,GAAIrS,MAAMC,QAAQysB,GAAM,OAAOA,EAE/B,MAAM,IAAI5mB,MAAM4mB,EAClB,E","sources":["../node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/decoder.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts","../node_modules/@ethersproject/hash/src.ts/ens-normalize/include.ts","../node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/_version.js","../node_modules/alchemy-sdk/node_modules/@ethersproject/properties/lib.esm/index.js","../node_modules/alchemy-sdk/src/internal/request-batcher.ts","../node_modules/alchemy-sdk/src/api/alchemy-provider.ts","../node_modules/bech32/index.js"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.7.1\";\n","export const version = \"providers/5.7.2\";\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n","/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { decode } from \"@ethersproject/base64\";\n\nimport {read_compressed_payload} from './decoder.js';\n\nexport function getData(): () => number {\n    return read_compressed_payload(decode(''));\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { ens_normalize } from \"./ens-normalize/lib\";\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nfunction checkComponent(comp: Uint8Array): Uint8Array {\n    if (comp.length === 0) { throw new Error(\"invalid ENS name; empty component\"); }\n    return comp;\n}\n\nfunction ensNameSplit(name: string): Array<Uint8Array> {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps: Array<Uint8Array> = [ ];\n\n    if (name.length === 0) { return comps; }\n\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) { throw new Error(\"invalid ENS name; empty component\"); }\n\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\n\nexport function ensNormalize(name: string): string {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\n\nexport function isValidName(name: string): boolean {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let result: string | Uint8Array = Zeros;\n\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n\n    return hexlify(result);\n}\n\nexport function dnsEncode(name: string): string {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n\n    }))) + \"00\";\n}\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"web/5.7.1\";\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nexport function getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nexport function resolveProperties(object) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nexport function checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nexport function shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nexport function deepCopy(object) {\n    return _deepCopy(object);\n}\nexport class Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map","import { JsonRpcRequest, JsonRpcResponse } from './internal-types';\n\n/** Maximum size of a batch on the rpc provider. */\nconst DEFAULT_MAX_REQUEST_BATCH_SIZE = 100;\n\n/** Timeout interval before the pending batch is sent. */\nconst DEFAULT_REQUEST_BATCH_DELAY_MS = 10;\n\n/**\n * Internal class to enqueue requests and automatically send/process batches.\n *\n * The underlying batching mechanism is loosely based on ethers.js's\n * `JsonRpcBatchProvider`.\n *\n * @internal\n */\nexport class RequestBatcher {\n  /** Timeout timer that periodically sends the pending batch. */\n  private pendingBatchTimer: NodeJS.Timer | undefined;\n\n  /**\n   * Array of enqueued requests along with the constructed promise handlers for\n   * each request.\n   */\n  private pendingBatch: Array<BatchRequest> = [];\n\n  constructor(\n    private readonly sendBatchFn: SendBatchFn,\n    private readonly maxBatchSize = DEFAULT_MAX_REQUEST_BATCH_SIZE\n  ) {}\n\n  /**\n   * Enqueues the provided request. The batch is immediately sent if the maximum\n   * batch size is reached. Otherwise, the request is enqueued onto a batch that\n   * is sent after 10ms.\n   *\n   * Returns a promise that resolves with the result of the request.\n   */\n  async enqueueRequest(request: JsonRpcRequest): Promise<any> {\n    const inflightRequest: BatchRequest = {\n      request,\n      resolve: undefined,\n      reject: undefined\n    };\n\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this.pendingBatch.push(inflightRequest);\n\n    if (this.pendingBatch.length === this.maxBatchSize) {\n      // Send batch immediately if we are at the maximum batch size.\n      void this.sendBatchRequest();\n    } else if (!this.pendingBatchTimer) {\n      // Schedule batch for next event loop + short duration\n      this.pendingBatchTimer = setTimeout(\n        () => this.sendBatchRequest(),\n        DEFAULT_REQUEST_BATCH_DELAY_MS\n      );\n    }\n\n    return promise;\n  }\n\n  /**\n   * Sends the currently queued batches and resets the batch and timer. Processes\n   * the batched response results back to the original promises.\n   */\n  private async sendBatchRequest(): Promise<void> {\n    // Get the current batch and clear it, so new requests\n    // go into the next batch\n    const batch = this.pendingBatch;\n    this.pendingBatch = [];\n    if (this.pendingBatchTimer) {\n      clearTimeout(this.pendingBatchTimer);\n      this.pendingBatchTimer = undefined;\n    }\n\n    // Get the request as an array of requests\n    const request = batch.map(inflight => inflight.request);\n\n    return this.sendBatchFn(request).then(\n      result => {\n        // For each result, feed it to the correct Promise, depending\n        // on whether it was a success or error\n        batch.forEach((inflightRequest, index) => {\n          const payload = result[index];\n          if (payload.error) {\n            const error = new Error(payload.error.message);\n            (error as any).code = payload.error.code;\n            (error as any).data = payload.error.data;\n            inflightRequest.reject!(error);\n          } else {\n            inflightRequest.resolve!(payload.result);\n          }\n        });\n      },\n      error => {\n        batch.forEach(inflightRequest => {\n          inflightRequest.reject!(error);\n        });\n      }\n    );\n  }\n}\n\n/** Function type to match the `fetchJson` function in ethers. */\ntype SendBatchFn = (reqs: JsonRpcRequest[]) => Promise<JsonRpcResponse[]>;\n\n/**\n * Internal interface to represent a request on a batch along with the promises to resolve it.\n */\ninterface BatchRequest {\n  request: JsonRpcRequest;\n  resolve?: (result: any) => void;\n  reject?: (error: Error) => void;\n}\n","import {\n  Network as NetworkFromEthers,\n  Networkish,\n  getNetwork as getNetworkFromEthers\n} from '@ethersproject/networks';\nimport { deepCopy } from '@ethersproject/properties';\nimport {\n  CommunityResourcable,\n  JsonRpcProvider\n} from '@ethersproject/providers';\nimport { ConnectionInfo, fetchJson } from '@ethersproject/web';\n\nimport { JsonRpcRequest, JsonRpcResponse } from '../internal/internal-types';\nimport { RequestBatcher } from '../internal/request-batcher';\nimport { Network } from '../types/types';\nimport {\n  CustomNetworks,\n  DEFAULT_ALCHEMY_API_KEY,\n  DEFAULT_NETWORK,\n  EthersNetwork,\n  getAlchemyHttpUrl,\n  getAlchemyWsUrl\n} from '../util/const';\nimport { logWarn } from '../util/logger';\nimport { IS_BROWSER } from '../util/util';\nimport { VERSION } from '../version';\nimport { AlchemyConfig } from './alchemy-config';\n\n/**\n * SDK's custom implementation of ethers.js's 'AlchemyProvider'.\n *\n * Do not call this constructor directly. Instead, instantiate an instance of\n * {@link Alchemy} and call {@link Alchemy.config.getProvider()}.\n *\n * @public\n */\nexport class AlchemyProvider\n  extends JsonRpcProvider\n  implements CommunityResourcable\n{\n  readonly apiKey: string;\n  readonly maxRetries: number;\n  readonly batchRequests: boolean;\n\n  /**\n   * VISIBLE ONLY FOR TESTING\n   *@internal\n   */\n  readonly batcher: RequestBatcher;\n\n  /** @internal */\n  constructor(config: AlchemyConfig) {\n    // Normalize the API Key to a string.\n    const apiKey = AlchemyProvider.getApiKey(config.apiKey);\n\n    // Generate our own connection info with the correct endpoint URLs.\n    const alchemyNetwork = AlchemyProvider.getAlchemyNetwork(config.network);\n    const connection = AlchemyProvider.getAlchemyConnectionInfo(\n      alchemyNetwork,\n      apiKey,\n      'http'\n    );\n\n    // If a hardcoded url was specified in the config, use that instead of the\n    // provided apiKey or network.\n    if (config.url !== undefined) {\n      connection.url = config.url;\n    }\n\n    connection.throttleLimit = config.maxRetries;\n\n    // Normalize the Alchemy named network input to the network names used by\n    // ethers. This allows the parent super constructor in JsonRpcProvider to\n    // correctly set the network.\n    const ethersNetwork = EthersNetwork[alchemyNetwork];\n    super(connection, ethersNetwork);\n\n    this.apiKey = config.apiKey;\n    this.maxRetries = config.maxRetries;\n    this.batchRequests = config.batchRequests;\n\n    // TODO: support individual headers when calling batch\n    const batcherConnection = { ...this.connection };\n    batcherConnection.headers!['Alchemy-Ethers-Sdk-Method'] = 'batchSend';\n    const sendBatchFn = (\n      requests: JsonRpcRequest[]\n    ): Promise<JsonRpcResponse[]> => {\n      return fetchJson(batcherConnection, JSON.stringify(requests));\n    };\n    this.batcher = new RequestBatcher(sendBatchFn);\n  }\n\n  /**\n   * Overrides the `UrlJsonRpcProvider.getApiKey` method as implemented by\n   * ethers.js. Returns the API key for an Alchemy provider.\n   *\n   * @internal\n   * @override\n   */\n  static getApiKey(apiKey: any): string {\n    if (apiKey == null) {\n      return DEFAULT_ALCHEMY_API_KEY;\n    }\n    if (apiKey && typeof apiKey !== 'string') {\n      throw new Error(\n        `Invalid apiKey '${apiKey}' provided. apiKey must be a string.`\n      );\n    }\n    return apiKey;\n  }\n\n  /**\n   * Overrides the `BaseProvider.getNetwork` method as implemented by ethers.js.\n   *\n   * This override allows the SDK to set the provider's network to values not\n   * yet supported by ethers.js.\n   *\n   * @internal\n   * @override\n   */\n  static getNetwork(network: Networkish): NetworkFromEthers {\n    if (typeof network === 'string' && network in CustomNetworks) {\n      return CustomNetworks[network];\n    }\n\n    // Call the standard ethers.js getNetwork method for other networks.\n    return getNetworkFromEthers(network);\n  }\n\n  /**\n   * Converts the `Networkish` input to the network enum used by Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyNetwork(network?: Networkish): Network {\n    if (network === undefined) {\n      return DEFAULT_NETWORK;\n    }\n\n    if (typeof network === 'number') {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be a string.`\n      );\n    }\n\n    // Guaranteed that `typeof network === 'string`.\n    const isValidNetwork = Object.values(Network).includes(network as Network);\n    if (!isValidNetwork) {\n      throw new Error(\n        `Invalid network '${network}' provided. Network must be one of: ` +\n          `${Object.values(Network).join(', ')}.`\n      );\n    }\n    return network as Network;\n  }\n\n  /**\n   * Returns a {@link ConnectionInfo} object compatible with ethers that contains\n   * the correct URLs for Alchemy.\n   *\n   * @internal\n   */\n  static getAlchemyConnectionInfo(\n    network: Network,\n    apiKey: string,\n    type: 'wss' | 'http'\n  ): ConnectionInfo {\n    const url =\n      type === 'http'\n        ? getAlchemyHttpUrl(network, apiKey)\n        : getAlchemyWsUrl(network, apiKey);\n    return {\n      headers: IS_BROWSER\n        ? {\n            'Alchemy-Ethers-Sdk-Version': VERSION\n          }\n        : {\n            'Alchemy-Ethers-Sdk-Version': VERSION,\n            'Accept-Encoding': 'gzip'\n          },\n      allowGzip: true,\n      url\n    };\n  }\n\n  /**\n   * Overrides the method in ethers.js's `StaticJsonRpcProvider` class. This\n   * method is called when calling methods on the parent class `BaseProvider`.\n   *\n   * @override\n   */\n  async detectNetwork(): Promise<NetworkFromEthers> {\n    let network = this.network;\n    if (network == null) {\n      network = await super.detectNetwork();\n\n      if (!network) {\n        throw new Error('No network detected');\n      }\n    }\n    return network;\n  }\n\n  _startPending(): void {\n    logWarn('WARNING: Alchemy Provider does not support pending filters');\n  }\n\n  /**\n   * Overrides the ether's `isCommunityResource()` method. Returns true if the\n   * current api key is the default key.\n   *\n   * @override\n   */\n  isCommunityResource(): boolean {\n    return this.apiKey === DEFAULT_ALCHEMY_API_KEY;\n  }\n\n  /**\n   * Overrides the base {@link JsonRpcProvider.send} method to implement custom\n   * logic for sending requests to Alchemy.\n   *\n   * @param method The method name to use for the request.\n   * @param params The parameters to use for the request.\n   * @override\n   * @public\n   */\n  // TODO: Add headers for `perform()` override.\n  send(method: string, params: Array<any>): Promise<any> {\n    return this._send(method, params, 'send');\n  }\n\n  /**\n   * DO NOT MODIFY.\n   *\n   * Original code copied over from ether.js's `JsonRpcProvider.send()`.\n   *\n   * This method is copied over directly in order to implement custom headers\n   *\n   * @internal\n   */\n  _send(\n    method: string,\n    params: Array<any>,\n    methodName: string,\n    forceBatch = false\n  ): Promise<any> {\n    const request = {\n      method,\n      params,\n      id: this._nextId++,\n      jsonrpc: '2.0'\n    };\n\n    // START MODIFIED CODE\n    const connection = { ...this.connection };\n    connection.headers!['Alchemy-Ethers-Sdk-Method'] = methodName;\n\n    if (this.batchRequests || forceBatch) {\n      return this.batcher.enqueueRequest(request as JsonRpcRequest);\n    }\n    // END MODIFIED CODE\n\n    this.emit('debug', {\n      action: 'request',\n      request: deepCopy(request),\n      provider: this\n    });\n\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = ['eth_chainId', 'eth_blockNumber'].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(\n      this.connection,\n      JSON.stringify(request),\n      getResult\n    ).then(\n      result => {\n        this.emit('debug', {\n          action: 'response',\n          request,\n          response: result,\n          provider: this\n        });\n\n        return result;\n      },\n      error => {\n        this.emit('debug', {\n          action: 'response',\n          error,\n          request,\n          provider: this\n        });\n\n        throw error;\n      }\n    );\n\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        // @ts-ignore - This is done by ethers.\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n}\n\n/**\n * DO NOT MODIFY.\n *\n * Original code copied over from ether.js's\n * `@ethersproject/web/src.ts/index.ts`. Used to support\n * {@link AlchemyProvider._send}, which is also copied over.\n */\nfunction getResult(payload: {\n  error?: { code?: number; data?: any; message?: string };\n  result?: any;\n}): any {\n  if (payload.error) {\n    const error: any = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"names":["decode","textData","atob","data","i","length","push","charCodeAt","arrayify","encode","String","fromCharCode","btoa","logger","Logger","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","value","defaultProvider","version","flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","read_compressed_payload","bytes","v","pos","read_payload","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","FULL","Math","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","decode_arithmetic","signed","read_ascending","n","next","read_deltas","read_member_array","lookup","vX","vN","read_counts","j","read_transposed","w","m","fill","undefined","read_linear_table","dx","dy","read_zero_terminated_array","ys","slice","_","j_dy","y","read_replacement_table","r","VALID","Set","IGNORED","MAPPED","ret","fromEntries","read_mapped_map","EMOJI_ROOT","sorted","sort","read","branches","keys","set","node","size","temp","valid","fe0f","save","check","read_emoji_trie","explode_cp","toUtf8CodePoints","filter_fe0f","cps","filter","cp","ens_normalize_post_check","split","label","lastIndexOf","Error","every","err","message","ens_normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","pop","has","toString","toUpperCase","s","fromCodePoint","normalize","eaten","saved","stack","find","splice","Zeros","Uint8Array","checkComponent","comp","ensNameSplit","toUtf8Bytes","comps","last","namehash","keccak256","concat","hexlify","Formatter","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","nonce","uint256","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","fromBlock","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","strict","substring","isHexString","getAddress","hexDataSlice","getContractAddress","hexValue","hexDataLength","hexZeroPad","format","author","_difficulty","_block","gas","isZero","networkId","parseInt","replace","parseTransaction","byzantium","object","key","checkKey","checkValue","nullValue","replaceValue","checkTopic","topic","serializeTopics","unique","Object","join","getEventTag","eventName","ForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","_lastBlockNumber","_inflight","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","sha256","matcherIpfs","RegExp","matchers","_parseString","toUtf8String","_parseBytes","getIpfsLink","link","match","numPad","padded","bytesPad","ceil","encodeBytes","datas","byteCount","hexConcat","Resolver","resolvedAddress","formatter","_supportsEip2544","then","eq","catch","code","selector","parameters","tx","ccipReadEnabled","parseBytes","supportsWildcard","throwError","_fetch","coinType","hexBytes","coinInfo","operation","words","bech32","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","metadataUrl","fetchJson","metadata","JSON","stringify","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","base64Encode","keyBytes","defaultFormatter","nextPollId","BaseProvider","_events","_emitted","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","poll","event","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","statusCode","errorMessage","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","minFromBlock","getLogs","log","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","cancelled","replacement","_wrapTransaction","timer","unref","clearTimeout","method","addressOrName","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","ccipReadFetch","ccipResult","_call","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","currentName","_getResolver","resolver","addrData","getResolver","resolverAddr","nameOrAddress","resolverAddress","getAvatar","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","Provider","errorGas","spelunk","requireData","parse","checkError","body","responseText","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","constructor","hexlifyTransaction","action","sendUncheckedTransaction","messageData","domain","types","_TypedDataEncoder","populated","password","Signer","allowedTransactionKeys","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","request","id","jsonrpc","deepCopy","cache","connection","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","getUrl","headers","skipFetchSetup","mode","credentials","redirect","referrer","fetchOptions","opts","fetch","arrayBuffer","get","statusMessage","statusText","staller","bodyify","isBytesLike","trim","processFunc","updated","k","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","allowGzip","user","allowInsecureAuthentication","argument","authorization","reData","dataMatch","base64Decode","requestBody","requestMethod","flatHeaders","header","runningTimeout","promise","cancel","runningFetch","location","tryAgain","retryAfter","random","pow","throttleRetry","race","_fetchData","ceiling","interval","retryLimit","onceBlock","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","form","_checkNormalize","HEX","defineProperty","enumerable","writable","logLevel","level","console","_log","levels","DEBUG","INFO","WARNING","errors","UNKNOWN_ERROR","messageDetails","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","INVALID_ARGUMENT","condition","UNSUPPORTED_OPERATION","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","opaque","bigint","string","_isFrozen","isFrozen","_deepCopy","item","RequestBatcher","sendBatchFn","maxBatchSize","inflightRequest","pendingBatch","sendBatchRequest","pendingBatchTimer","batch","inflight","index","config","apiKey","getApiKey","alchemyNetwork","getAlchemyNetwork","getAlchemyConnectionInfo","maxRetries","ethersNetwork","EthersNetwork","batchRequests","batcherConnection","batcher","requests","_super","logWarn","DEFAULT_ALCHEMY_API_KEY","_send","methodName","forceBatch","enqueueRequest","CustomNetworks","getNetworkFromEthers","DEFAULT_NETWORK","Network","includes","getAlchemyHttpUrl","getAlchemyWsUrl","IS_BROWSER","VERSION","ALPHABET","ALPHABET_MAP","z","charAt","TypeError","polymodStep","pre","prefixChk","chk","c","__decode","str","LIMIT","lowered","uppered","wordChars","convert","inBits","outBits","pad","bits","maxV","module","exports","decodeUnsafe","res","arguments","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords"],"sourceRoot":""}